
ProjectTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062ec  080062ec  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062f4  080062f4  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f4  080062f4  000162f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  080062fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ec  200000e8  080063e4  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009d4  080063e4  000209d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013100  00000000  00000000  0002015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e0  00000000  00000000  0003325b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00035840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce0  00000000  00000000  000368a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b22  00000000  00000000  00037580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013dde  00000000  00000000  0005e0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f28e5  00000000  00000000  00071e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b04  00000000  00000000  00164768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0016926c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006278 	.word	0x08006278

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	08006278 	.word	0x08006278

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HCSR04_Init>:
	.echoChannel = TIM_CHANNEL_1 | TIM_CHANNEL_2,
	.trigTimer = &htim9,
	.trigChannel = TIM_CHANNEL_1
};

void HCSR04_Init(HCSR04* hcsr04) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	//HAL_TIM_IC_Start_IT(hcsr04->echoTimer, hcsr04->echoChannel);
	HAL_TIM_PWM_Start(hcsr04->trigTimer, hcsr04->trigChannel);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689a      	ldr	r2, [r3, #8]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	4619      	mov	r1, r3
 80005be:	4610      	mov	r0, r2
 80005c0:	f002 fe22 	bl	8003208 <HAL_TIM_PWM_Start>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <HCSR04_Read>:

uint32_t HCSR04_Read(HCSR04* hcsr04) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	return HAL_TIM_ReadCapturedValue(hcsr04->echoTimer, hcsr04->echoChannel) / 58;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	4619      	mov	r1, r3
 80005de:	4610      	mov	r0, r2
 80005e0:	f003 fb48 	bl	8003c74 <HAL_TIM_ReadCapturedValue>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HCSR04_Read+0x2c>)
 80005e8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ec:	095b      	lsrs	r3, r3, #5
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	8d3dcb09 	.word	0x8d3dcb09

080005fc <SegmentDisplay_Write>:
	.selectPins = { SD_8_Pin, SD_9_Pin, SD_12_Pin },
	.digitPorts = { SD_11_GPIO_Port, SD_7_GPIO_Port, SD_4_GPIO_Port, SD_2_GPIO_Port, SD_1_GPIO_Port, SD_10_GPIO_Port, SD_5_GPIO_Port, SD_3_GPIO_Port },
	.digitPins = { SD_11_Pin, SD_7_Pin, SD_4_Pin, SD_2_Pin, SD_1_Pin, SD_10_Pin, SD_5_Pin, SD_3_Pin }
};

void SegmentDisplay_Write(SegmentDisplay* sd, uint32_t val) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
	int tmp = val;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 3; ++i) {
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	e081      	b.n	8000714 <SegmentDisplay_Write+0x118>
		int digit = DIGIT_SEGMENTS[tmp % 10];
 8000610:	6979      	ldr	r1, [r7, #20]
 8000612:	4b45      	ldr	r3, [pc, #276]	; (8000728 <SegmentDisplay_Write+0x12c>)
 8000614:	fb83 2301 	smull	r2, r3, r3, r1
 8000618:	109a      	asrs	r2, r3, #2
 800061a:	17cb      	asrs	r3, r1, #31
 800061c:	1ad2      	subs	r2, r2, r3
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	1aca      	subs	r2, r1, r3
 8000628:	4b40      	ldr	r3, [pc, #256]	; (800072c <SegmentDisplay_Write+0x130>)
 800062a:	5c9b      	ldrb	r3, [r3, r2]
 800062c:	60fb      	str	r3, [r7, #12]
		if (i == 0) {
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d108      	bne.n	8000646 <SegmentDisplay_Write+0x4a>
			HAL_GPIO_WritePin(sd->selectPorts[2], sd->selectPins[2], RESET);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6898      	ldr	r0, [r3, #8]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	8a1b      	ldrh	r3, [r3, #16]
 800063c:	2200      	movs	r2, #0
 800063e:	4619      	mov	r1, r3
 8000640:	f001 fb08 	bl	8001c54 <HAL_GPIO_WritePin>
 8000644:	e016      	b.n	8000674 <SegmentDisplay_Write+0x78>
		} else {
			HAL_GPIO_WritePin(sd->selectPorts[i - 1], sd->selectPins[i - 1], RESET);
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	3b01      	subs	r3, #1
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	3304      	adds	r3, #4
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	889b      	ldrh	r3, [r3, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	4619      	mov	r1, r3
 8000662:	f001 faf7 	bl	8001c54 <HAL_GPIO_WritePin>
			if (i == 2) {
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d103      	bne.n	8000674 <SegmentDisplay_Write+0x78>
				digit |= 1;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
			}
		}

		for (int j = 0; j < 8; ++j) {
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	e02d      	b.n	80006d6 <SegmentDisplay_Write+0xda>
			if ((digit >> (7 - j)) & 1) {
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	f1c3 0307 	rsb	r3, r3, #7
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	fa42 f303 	asr.w	r3, r2, r3
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d010      	beq.n	80006b0 <SegmentDisplay_Write+0xb4>
				HAL_GPIO_WritePin(sd->digitPorts[j], sd->digitPins[j], RESET);
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	3304      	adds	r3, #4
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	6858      	ldr	r0, [r3, #4]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	3318      	adds	r3, #24
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	4413      	add	r3, r2
 80006a4:	889b      	ldrh	r3, [r3, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	f001 fad3 	bl	8001c54 <HAL_GPIO_WritePin>
 80006ae:	e00f      	b.n	80006d0 <SegmentDisplay_Write+0xd4>
			} else {
				HAL_GPIO_WritePin(sd->digitPorts[j], sd->digitPins[j], SET);
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	3304      	adds	r3, #4
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	6858      	ldr	r0, [r3, #4]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	3318      	adds	r3, #24
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	889b      	ldrh	r3, [r3, #4]
 80006c8:	2201      	movs	r2, #1
 80006ca:	4619      	mov	r1, r3
 80006cc:	f001 fac2 	bl	8001c54 <HAL_GPIO_WritePin>
		for (int j = 0; j < 8; ++j) {
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	3301      	adds	r3, #1
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b07      	cmp	r3, #7
 80006da:	ddce      	ble.n	800067a <SegmentDisplay_Write+0x7e>
			}
		}

		HAL_GPIO_WritePin(sd->selectPorts[i], sd->selectPins[i], SET);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	3304      	adds	r3, #4
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	889b      	ldrh	r3, [r3, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	f001 faae 	bl	8001c54 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f000 ffc9 	bl	8001690 <HAL_Delay>
		tmp /= 10;
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	4a09      	ldr	r2, [pc, #36]	; (8000728 <SegmentDisplay_Write+0x12c>)
 8000702:	fb82 1203 	smull	r1, r2, r2, r3
 8000706:	1092      	asrs	r2, r2, #2
 8000708:	17db      	asrs	r3, r3, #31
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 3; ++i) {
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	3301      	adds	r3, #1
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	2b02      	cmp	r3, #2
 8000718:	f77f af7a 	ble.w	8000610 <SegmentDisplay_Write+0x14>
	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	66666667 	.word	0x66666667
 800072c:	20000010 	.word	0x20000010

08000730 <HAL_TIM_IC_CaptureCallback>:
size_t valIdx = 0;
char buf[256];
int buzzerDelay1 = 0;
int buzzerDelay2 = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	if (htim == distanceSensor.echoTimer) {
 8000738:	4b77      	ldr	r3, [pc, #476]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	f040 80e6 	bne.w	8000910 <HAL_TIM_IC_CaptureCallback+0x1e0>
		valBuf[valIdx++] = HCSR04_Read(&distanceSensor);
 8000744:	4b75      	ldr	r3, [pc, #468]	; (800091c <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8000746:	681c      	ldr	r4, [r3, #0]
 8000748:	1c63      	adds	r3, r4, #1
 800074a:	4a74      	ldr	r2, [pc, #464]	; (800091c <HAL_TIM_IC_CaptureCallback+0x1ec>)
 800074c:	6013      	str	r3, [r2, #0]
 800074e:	4872      	ldr	r0, [pc, #456]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8000750:	f7ff ff3c 	bl	80005cc <HCSR04_Read>
 8000754:	4603      	mov	r3, r0
 8000756:	4a72      	ldr	r2, [pc, #456]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000758:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		valIdx %= 10;
 800075c:	4b6f      	ldr	r3, [pc, #444]	; (800091c <HAL_TIM_IC_CaptureCallback+0x1ec>)
 800075e:	6819      	ldr	r1, [r3, #0]
 8000760:	4b70      	ldr	r3, [pc, #448]	; (8000924 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8000762:	fba3 2301 	umull	r2, r3, r3, r1
 8000766:	08da      	lsrs	r2, r3, #3
 8000768:	4613      	mov	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	1aca      	subs	r2, r1, r3
 8000772:	4b6a      	ldr	r3, [pc, #424]	; (800091c <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8000774:	601a      	str	r2, [r3, #0]
		//if (valIdx >= 10) {
			uint32_t avg = valBuf[0], vmin = valBuf[0], vmax = valBuf[0];
 8000776:	4b6a      	ldr	r3, [pc, #424]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	61fb      	str	r3, [r7, #28]
 800077c:	4b68      	ldr	r3, [pc, #416]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	4b67      	ldr	r3, [pc, #412]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	617b      	str	r3, [r7, #20]
			for (int i = 1; i < 10; ++i) {
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	e021      	b.n	80007d2 <HAL_TIM_IC_CaptureCallback+0xa2>
				avg += valBuf[i];
 800078e:	4a64      	ldr	r2, [pc, #400]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000796:	69fa      	ldr	r2, [r7, #28]
 8000798:	4413      	add	r3, r2
 800079a:	61fb      	str	r3, [r7, #28]
				if (valBuf[i] < vmin) {
 800079c:	4a60      	ldr	r2, [pc, #384]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d904      	bls.n	80007b4 <HAL_TIM_IC_CaptureCallback+0x84>
					vmin = valBuf[i];
 80007aa:	4a5d      	ldr	r2, [pc, #372]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b2:	61bb      	str	r3, [r7, #24]
				}
				if (valBuf[i] > vmax) {
 80007b4:	4a5a      	ldr	r2, [pc, #360]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d204      	bcs.n	80007cc <HAL_TIM_IC_CaptureCallback+0x9c>
					vmax = valBuf[i];
 80007c2:	4a57      	ldr	r2, [pc, #348]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ca:	617b      	str	r3, [r7, #20]
			for (int i = 1; i < 10; ++i) {
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	2b09      	cmp	r3, #9
 80007d6:	ddda      	ble.n	800078e <HAL_TIM_IC_CaptureCallback+0x5e>
				}
			}
			avg -= vmax + vmin;
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	4413      	add	r3, r2
 80007de:	69fa      	ldr	r2, [r7, #28]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	61fb      	str	r3, [r7, #28]
			avg /= 8;
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	61fb      	str	r3, [r7, #28]
			val = avg;
 80007ea:	4a4f      	ldr	r2, [pc, #316]	; (8000928 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	6013      	str	r3, [r2, #0]

			int len = sprintf((char*)buf, "Distance: %li\r\n", avg);
 80007f0:	69fa      	ldr	r2, [r7, #28]
 80007f2:	494e      	ldr	r1, [pc, #312]	; (800092c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80007f4:	484e      	ldr	r0, [pc, #312]	; (8000930 <HAL_TIM_IC_CaptureCallback+0x200>)
 80007f6:	f005 f89b 	bl	8005930 <siprintf>
 80007fa:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart3, (uint8_t*)buf, len, 9999);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	f242 730f 	movw	r3, #9999	; 0x270f
 8000804:	494a      	ldr	r1, [pc, #296]	; (8000930 <HAL_TIM_IC_CaptureCallback+0x200>)
 8000806:	484b      	ldr	r0, [pc, #300]	; (8000934 <HAL_TIM_IC_CaptureCallback+0x204>)
 8000808:	f004 f916 	bl	8004a38 <HAL_UART_Transmit>
			//valIdx = 0;

			if (avg < 20) {
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	2b13      	cmp	r3, #19
 8000810:	d81c      	bhi.n	800084c <HAL_TIM_IC_CaptureCallback+0x11c>
				HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000818:	4847      	ldr	r0, [pc, #284]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x208>)
 800081a:	f001 fa1b 	bl	8001c54 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000824:	4844      	ldr	r0, [pc, #272]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000826:	f001 fa15 	bl	8001c54 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000830:	4841      	ldr	r0, [pc, #260]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000832:	f001 fa0f 	bl	8001c54 <HAL_GPIO_WritePin>
				htim2.Instance->CCR4 = 200;
 8000836:	4b41      	ldr	r3, [pc, #260]	; (800093c <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	22c8      	movs	r2, #200	; 0xc8
 800083c:	641a      	str	r2, [r3, #64]	; 0x40
				buzzerDelay1 = 50;
 800083e:	4b40      	ldr	r3, [pc, #256]	; (8000940 <HAL_TIM_IC_CaptureCallback+0x210>)
 8000840:	2232      	movs	r2, #50	; 0x32
 8000842:	601a      	str	r2, [r3, #0]
				buzzerDelay2 = 0;
 8000844:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <HAL_TIM_IC_CaptureCallback+0x214>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
				buzzerDelay2 = 3 * avg;
			}

		//}
	}
}
 800084a:	e061      	b.n	8000910 <HAL_TIM_IC_CaptureCallback+0x1e0>
			} else if (avg < 60) {
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	2b3b      	cmp	r3, #59	; 0x3b
 8000850:	d824      	bhi.n	800089c <HAL_TIM_IC_CaptureCallback+0x16c>
				HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000858:	4837      	ldr	r0, [pc, #220]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x208>)
 800085a:	f001 f9fb 	bl	8001c54 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, SET);
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000864:	4834      	ldr	r0, [pc, #208]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000866:	f001 f9f5 	bl	8001c54 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000870:	4831      	ldr	r0, [pc, #196]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000872:	f001 f9ef 	bl	8001c54 <HAL_GPIO_WritePin>
				htim2.Instance->CCR4 = 100;
 8000876:	4b31      	ldr	r3, [pc, #196]	; (800093c <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2264      	movs	r2, #100	; 0x64
 800087c:	641a      	str	r2, [r3, #64]	; 0x40
				buzzerDelay1 = 3 * avg;
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	4613      	mov	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	461a      	mov	r2, r3
 8000888:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <HAL_TIM_IC_CaptureCallback+0x210>)
 800088a:	601a      	str	r2, [r3, #0]
				buzzerDelay2 = 3 * avg;
 800088c:	69fa      	ldr	r2, [r7, #28]
 800088e:	4613      	mov	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	461a      	mov	r2, r3
 8000896:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <HAL_TIM_IC_CaptureCallback+0x214>)
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	e039      	b.n	8000910 <HAL_TIM_IC_CaptureCallback+0x1e0>
				HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a2:	4825      	ldr	r0, [pc, #148]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x208>)
 80008a4:	f001 f9d6 	bl	8001c54 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ae:	4822      	ldr	r0, [pc, #136]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x208>)
 80008b0:	f001 f9d0 	bl	8001c54 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ba:	481f      	ldr	r0, [pc, #124]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x208>)
 80008bc:	f001 f9ca 	bl	8001c54 <HAL_GPIO_WritePin>
				if (avg < 175) {
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	2bae      	cmp	r3, #174	; 0xae
 80008c4:	d812      	bhi.n	80008ec <HAL_TIM_IC_CaptureCallback+0x1bc>
					htim2.Instance->CCR4 = 60 + (20*(175 - avg))/(175 - 60);
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	f06f 0213 	mvn.w	r2, #19
 80008cc:	fb02 f303 	mul.w	r3, r2, r3
 80008d0:	f603 52ac 	addw	r2, r3, #3500	; 0xdac
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <HAL_TIM_IC_CaptureCallback+0x218>)
 80008d6:	fba3 1302 	umull	r1, r3, r3, r2
 80008da:	1ad2      	subs	r2, r2, r3
 80008dc:	0852      	lsrs	r2, r2, #1
 80008de:	4413      	add	r3, r2
 80008e0:	099a      	lsrs	r2, r3, #6
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <HAL_TIM_IC_CaptureCallback+0x20c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	323c      	adds	r2, #60	; 0x3c
 80008e8:	641a      	str	r2, [r3, #64]	; 0x40
 80008ea:	e003      	b.n	80008f4 <HAL_TIM_IC_CaptureCallback+0x1c4>
					htim2.Instance->CCR4 = 0;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <HAL_TIM_IC_CaptureCallback+0x20c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	641a      	str	r2, [r3, #64]	; 0x40
				buzzerDelay1 = 3 * avg;
 80008f4:	69fa      	ldr	r2, [r7, #28]
 80008f6:	4613      	mov	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	4413      	add	r3, r2
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_TIM_IC_CaptureCallback+0x210>)
 8000900:	601a      	str	r2, [r3, #0]
				buzzerDelay2 = 3 * avg;
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	4613      	mov	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	4413      	add	r3, r2
 800090a:	461a      	mov	r2, r3
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <HAL_TIM_IC_CaptureCallback+0x214>)
 800090e:	601a      	str	r2, [r3, #0]
}
 8000910:	bf00      	nop
 8000912:	3724      	adds	r7, #36	; 0x24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	20000000 	.word	0x20000000
 800091c:	20000270 	.word	0x20000270
 8000920:	20000064 	.word	0x20000064
 8000924:	cccccccd 	.word	0xcccccccd
 8000928:	20000060 	.word	0x20000060
 800092c:	08006290 	.word	0x08006290
 8000930:	20000274 	.word	0x20000274
 8000934:	20000104 	.word	0x20000104
 8000938:	40021000 	.word	0x40021000
 800093c:	200001d8 	.word	0x200001d8
 8000940:	20000374 	.word	0x20000374
 8000944:	20000378 	.word	0x20000378
 8000948:	1cf06adb 	.word	0x1cf06adb

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fe41 	bl	80015d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f818 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f000 fa3c 	bl	8000dd4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800095c:	f000 f9dc 	bl	8000d18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000960:	f000 fa0a 	bl	8000d78 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000964:	f000 f878 	bl	8000a58 <MX_TIM1_Init>
  MX_TIM9_Init();
 8000968:	f000 f974 	bl	8000c54 <MX_TIM9_Init>
  MX_TIM2_Init();
 800096c:	f000 f918 	bl	8000ba0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HCSR04_Init(&distanceSensor);
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <main+0x34>)
 8000972:	f7ff fe1b 	bl	80005ac <HCSR04_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  SegmentDisplay_Write(&display, 7);
 8000976:	2107      	movs	r1, #7
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <main+0x38>)
 800097a:	f7ff fe3f 	bl	80005fc <SegmentDisplay_Write>
 800097e:	e7fa      	b.n	8000976 <main+0x2a>
 8000980:	20000000 	.word	0x20000000
 8000984:	2000001c 	.word	0x2000001c

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	; 0x50
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	2230      	movs	r2, #48	; 0x30
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f004 ffea 	bl	8005970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009ac:	f001 fab4 	bl	8001f18 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <SystemClock_Config+0xc8>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <SystemClock_Config+0xc8>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <SystemClock_Config+0xc8>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <SystemClock_Config+0xcc>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009d0:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <SystemClock_Config+0xcc>)
 80009d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <SystemClock_Config+0xcc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	2302      	movs	r3, #2
 80009f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009fc:	2348      	movs	r3, #72	; 0x48
 80009fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a04:	2303      	movs	r3, #3
 8000a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0320 	add.w	r3, r7, #32
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fa93 	bl	8001f38 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a18:	f000 fb36 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	2302      	movs	r3, #2
 8000a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	2102      	movs	r1, #2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fd21 	bl	8002480 <HAL_RCC_ClockConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a44:	f000 fb20 	bl	8001088 <Error_Handler>
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3750      	adds	r7, #80	; 0x50
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40007000 	.word	0x40007000

08000a58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b090      	sub	sp, #64	; 0x40
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a94:	4b40      	ldr	r3, [pc, #256]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000a96:	4a41      	ldr	r2, [pc, #260]	; (8000b9c <MX_TIM1_Init+0x144>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 36;
 8000a9a:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000a9c:	2224      	movs	r2, #36	; 0x24
 8000a9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b3d      	ldr	r3, [pc, #244]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000aa6:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ab4:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac0:	4835      	ldr	r0, [pc, #212]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000ac2:	f002 faf3 	bl	80030ac <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000acc:	f000 fadc 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ada:	4619      	mov	r1, r3
 8000adc:	482e      	ldr	r0, [pc, #184]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000ade:	f002 ffbd 	bl	8003a5c <HAL_TIM_ConfigClockSource>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000ae8:	f000 face 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000aec:	482a      	ldr	r0, [pc, #168]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000aee:	f002 fc85 	bl	80033fc <HAL_TIM_IC_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000af8:	f000 fac6 	bl	8001088 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000afc:	2304      	movs	r3, #4
 8000afe:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b00:	2350      	movs	r3, #80	; 0x50
 8000b02:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	4820      	ldr	r0, [pc, #128]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000b18:	f003 f86a 	bl	8003bf0 <HAL_TIM_SlaveConfigSynchro>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000b22:	f000 fab1 	bl	8001088 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4816      	ldr	r0, [pc, #88]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000b40:	f002 fddc 	bl	80036fc <HAL_TIM_IC_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b4a:	f000 fa9d 	bl	8001088 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b52:	2302      	movs	r3, #2
 8000b54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480e      	ldr	r0, [pc, #56]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000b60:	f002 fdcc 	bl	80036fc <HAL_TIM_IC_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000b6a:	f000 fa8d 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <MX_TIM1_Init+0x140>)
 8000b80:	f003 fe60 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000b8a:	f000 fa7d 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	3740      	adds	r7, #64	; 0x40
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000018c 	.word	0x2000018c
 8000b9c:	40010000 	.word	0x40010000

08000ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	615a      	str	r2, [r3, #20]
 8000bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <MX_TIM2_Init+0xb0>)
 8000bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <MX_TIM2_Init+0xb0>)
 8000bce:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000bd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_TIM2_Init+0xb0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 512;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_TIM2_Init+0xb0>)
 8000bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <MX_TIM2_Init+0xb0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_TIM2_Init+0xb0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bee:	4818      	ldr	r0, [pc, #96]	; (8000c50 <MX_TIM2_Init+0xb0>)
 8000bf0:	f002 fab3 	bl	800315a <HAL_TIM_PWM_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000bfa:	f000 fa45 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4810      	ldr	r0, [pc, #64]	; (8000c50 <MX_TIM2_Init+0xb0>)
 8000c0e:	f003 fe19 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c18:	f000 fa36 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c1c:	2360      	movs	r3, #96	; 0x60
 8000c1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	220c      	movs	r2, #12
 8000c30:	4619      	mov	r1, r3
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <MX_TIM2_Init+0xb0>)
 8000c34:	f002 fdfe 	bl	8003834 <HAL_TIM_PWM_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000c3e:	f000 fa23 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <MX_TIM2_Init+0xb0>)
 8000c44:	f000 faec 	bl	8001220 <HAL_TIM_MspPostInit>

}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200001d8 	.word	0x200001d8

08000c54 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <MX_TIM9_Init+0xbc>)
 8000c7c:	4a25      	ldr	r2, [pc, #148]	; (8000d14 <MX_TIM9_Init+0xc0>)
 8000c7e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 72;
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <MX_TIM9_Init+0xbc>)
 8000c82:	2248      	movs	r2, #72	; 0x48
 8000c84:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_TIM9_Init+0xbc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 62500;
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <MX_TIM9_Init+0xbc>)
 8000c8e:	f24f 4224 	movw	r2, #62500	; 0xf424
 8000c92:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_TIM9_Init+0xbc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_TIM9_Init+0xbc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000ca0:	481b      	ldr	r0, [pc, #108]	; (8000d10 <MX_TIM9_Init+0xbc>)
 8000ca2:	f002 fa03 	bl	80030ac <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000cac:	f000 f9ec 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000cb6:	f107 0320 	add.w	r3, r7, #32
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4814      	ldr	r0, [pc, #80]	; (8000d10 <MX_TIM9_Init+0xbc>)
 8000cbe:	f002 fecd 	bl	8003a5c <HAL_TIM_ConfigClockSource>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000cc8:	f000 f9de 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000ccc:	4810      	ldr	r0, [pc, #64]	; (8000d10 <MX_TIM9_Init+0xbc>)
 8000cce:	f002 fa44 	bl	800315a <HAL_TIM_PWM_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000cd8:	f000 f9d6 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cdc:	2360      	movs	r3, #96	; 0x60
 8000cde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8000ce0:	230a      	movs	r3, #10
 8000ce2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4807      	ldr	r0, [pc, #28]	; (8000d10 <MX_TIM9_Init+0xbc>)
 8000cf4:	f002 fd9e 	bl	8003834 <HAL_TIM_PWM_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000cfe:	f000 f9c3 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000d02:	4803      	ldr	r0, [pc, #12]	; (8000d10 <MX_TIM9_Init+0xbc>)
 8000d04:	f000 fa8c 	bl	8001220 <HAL_TIM_MspPostInit>

}
 8000d08:	bf00      	nop
 8000d0a:	3730      	adds	r7, #48	; 0x30
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000224 	.word	0x20000224
 8000d14:	40014000 	.word	0x40014000

08000d18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d1e:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <MX_USART3_UART_Init+0x5c>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d5c:	f003 fe1e 	bl	800499c <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d66:	f000 f98f 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000104 	.word	0x20000104
 8000d74:	40004800 	.word	0x40004800

08000d78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d86:	2206      	movs	r2, #6
 8000d88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbc:	f000 ff63 	bl	8001c86 <HAL_PCD_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dc6:	f000 f95f 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000037c 	.word	0x2000037c

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	; 0x38
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dea:	4b9f      	ldr	r3, [pc, #636]	; (8001068 <MX_GPIO_Init+0x294>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a9e      	ldr	r2, [pc, #632]	; (8001068 <MX_GPIO_Init+0x294>)
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b9c      	ldr	r3, [pc, #624]	; (8001068 <MX_GPIO_Init+0x294>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0310 	and.w	r3, r3, #16
 8000dfe:	623b      	str	r3, [r7, #32]
 8000e00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b99      	ldr	r3, [pc, #612]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a98      	ldr	r2, [pc, #608]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b96      	ldr	r3, [pc, #600]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1a:	4b93      	ldr	r3, [pc, #588]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a92      	ldr	r2, [pc, #584]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b90      	ldr	r3, [pc, #576]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b8d      	ldr	r3, [pc, #564]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a8c      	ldr	r2, [pc, #560]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b8a      	ldr	r3, [pc, #552]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b87      	ldr	r3, [pc, #540]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a86      	ldr	r2, [pc, #536]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b84      	ldr	r3, [pc, #528]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e62:	4b81      	ldr	r3, [pc, #516]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a80      	ldr	r2, [pc, #512]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b7e      	ldr	r3, [pc, #504]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7a:	4b7b      	ldr	r3, [pc, #492]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a7a      	ldr	r2, [pc, #488]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b78      	ldr	r3, [pc, #480]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e92:	4b75      	ldr	r3, [pc, #468]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a74      	ldr	r2, [pc, #464]	; (8001068 <MX_GPIO_Init+0x294>)
 8000e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b72      	ldr	r3, [pc, #456]	; (8001068 <MX_GPIO_Init+0x294>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SD_5_Pin|SD_7_Pin|LD3_Pin
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f24f 01a9 	movw	r1, #61609	; 0xf0a9
 8000eb0:	486e      	ldr	r0, [pc, #440]	; (800106c <MX_GPIO_Init+0x298>)
 8000eb2:	f000 fecf 	bl	8001c54 <HAL_GPIO_WritePin>
                          |SD_10_Pin|SD_1_Pin|SD_2_Pin|Test_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_12_GPIO_Port, SD_12_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ebc:	486c      	ldr	r0, [pc, #432]	; (8001070 <MX_GPIO_Init+0x29c>)
 8000ebe:	f000 fec9 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_Red_Pin|LED_Yellow_Pin|LED_Green_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8000ec8:	486a      	ldr	r0, [pc, #424]	; (8001074 <MX_GPIO_Init+0x2a0>)
 8000eca:	f000 fec3 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_8_Pin|SD_9_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000ed4:	4868      	ldr	r0, [pc, #416]	; (8001078 <MX_GPIO_Init+0x2a4>)
 8000ed6:	f000 febd 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2140      	movs	r1, #64	; 0x40
 8000ede:	4867      	ldr	r0, [pc, #412]	; (800107c <MX_GPIO_Init+0x2a8>)
 8000ee0:	f000 feb8 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_11_Pin|SD_3_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	21c0      	movs	r1, #192	; 0xc0
 8000ee8:	4865      	ldr	r0, [pc, #404]	; (8001080 <MX_GPIO_Init+0x2ac>)
 8000eea:	f000 feb3 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_4_GPIO_Port, SD_4_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef4:	4863      	ldr	r0, [pc, #396]	; (8001084 <MX_GPIO_Init+0x2b0>)
 8000ef6:	f000 fead 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000efa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	485b      	ldr	r0, [pc, #364]	; (8001080 <MX_GPIO_Init+0x2ac>)
 8000f12:	f000 fcf3 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f16:	2332      	movs	r3, #50	; 0x32
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f26:	230b      	movs	r3, #11
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4853      	ldr	r0, [pc, #332]	; (8001080 <MX_GPIO_Init+0x2ac>)
 8000f32:	f000 fce3 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000f36:	2382      	movs	r3, #130	; 0x82
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f46:	230b      	movs	r3, #11
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	484c      	ldr	r0, [pc, #304]	; (8001084 <MX_GPIO_Init+0x2b0>)
 8000f52:	f000 fcd3 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SD_5_Pin SD_7_Pin LD3_Pin
                           SD_10_Pin SD_1_Pin SD_2_Pin Test_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SD_5_Pin|SD_7_Pin|LD3_Pin
 8000f56:	f24f 03a9 	movw	r3, #61609	; 0xf0a9
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SD_10_Pin|SD_1_Pin|SD_2_Pin|Test_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	483f      	ldr	r0, [pc, #252]	; (800106c <MX_GPIO_Init+0x298>)
 8000f70:	f000 fcc4 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_12_Pin */
  GPIO_InitStruct.Pin = SD_12_Pin;
 8000f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_12_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4838      	ldr	r0, [pc, #224]	; (8001070 <MX_GPIO_Init+0x29c>)
 8000f8e:	f000 fcb5 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Red_Pin LED_Yellow_Pin LED_Green_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Yellow_Pin|LED_Green_Pin;
 8000f92:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4832      	ldr	r0, [pc, #200]	; (8001074 <MX_GPIO_Init+0x2a0>)
 8000fac:	f000 fca6 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_8_Pin SD_9_Pin */
  GPIO_InitStruct.Pin = SD_8_Pin|SD_9_Pin;
 8000fb0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	482b      	ldr	r0, [pc, #172]	; (8001078 <MX_GPIO_Init+0x2a4>)
 8000fca:	f000 fc97 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fce:	2340      	movs	r3, #64	; 0x40
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4825      	ldr	r0, [pc, #148]	; (800107c <MX_GPIO_Init+0x2a8>)
 8000fe6:	f000 fc89 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	481f      	ldr	r0, [pc, #124]	; (800107c <MX_GPIO_Init+0x2a8>)
 8000ffe:	f000 fc7d 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_11_Pin SD_3_Pin */
  GPIO_InitStruct.Pin = SD_11_Pin|SD_3_Pin;
 8001002:	23c0      	movs	r3, #192	; 0xc0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	4819      	ldr	r0, [pc, #100]	; (8001080 <MX_GPIO_Init+0x2ac>)
 800101a:	f000 fc6f 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_4_Pin */
  GPIO_InitStruct.Pin = SD_4_Pin;
 800101e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_4_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4813      	ldr	r0, [pc, #76]	; (8001084 <MX_GPIO_Init+0x2b0>)
 8001038:	f000 fc60 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800103c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104e:	230b      	movs	r3, #11
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <MX_GPIO_Init+0x2a8>)
 800105a:	f000 fc4f 	bl	80018fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800105e:	bf00      	nop
 8001060:	3738      	adds	r7, #56	; 0x38
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40020400 	.word	0x40020400
 8001070:	40021400 	.word	0x40021400
 8001074:	40021000 	.word	0x40021000
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40021800 	.word	0x40021800
 8001080:	40020800 	.word	0x40020800
 8001084:	40020000 	.word	0x40020000

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HAL_MspInit+0x44>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_MspInit+0x44>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_MspInit+0x44>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_MspInit+0x44>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_MspInit+0x44>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_MspInit+0x44>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a24      	ldr	r2, [pc, #144]	; (800118c <HAL_TIM_Base_MspInit+0xb0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d131      	bne.n	8001162 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <HAL_TIM_Base_MspInit+0xb4>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <HAL_TIM_Base_MspInit+0xb4>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_TIM_Base_MspInit+0xb4>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <HAL_TIM_Base_MspInit+0xb4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <HAL_TIM_Base_MspInit+0xb4>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_TIM_Base_MspInit+0xb4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HCSR04_ECHO_Pin;
 800112e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001140:	2301      	movs	r3, #1
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	4812      	ldr	r0, [pc, #72]	; (8001194 <HAL_TIM_Base_MspInit+0xb8>)
 800114c:	f000 fbd6 	bl	80018fc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	201b      	movs	r0, #27
 8001156:	f000 fb9a 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800115a:	201b      	movs	r0, #27
 800115c:	f000 fbb3 	bl	80018c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001160:	e010      	b.n	8001184 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM9)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <HAL_TIM_Base_MspInit+0xbc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d10b      	bne.n	8001184 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_TIM_Base_MspInit+0xb4>)
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_TIM_Base_MspInit+0xb4>)
 8001172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001176:	6453      	str	r3, [r2, #68]	; 0x44
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_TIM_Base_MspInit+0xb4>)
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40010000 	.word	0x40010000
 8001190:	40023800 	.word	0x40023800
 8001194:	40021000 	.word	0x40021000
 8001198:	40014000 	.word	0x40014000

0800119c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011bc:	d127      	bne.n	800120e <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_TIM_PWM_MspInit+0x7c>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <HAL_TIM_PWM_MspInit+0x7c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_TIM_PWM_MspInit+0x7c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_TIM_PWM_MspInit+0x7c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_TIM_PWM_MspInit+0x7c>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_TIM_PWM_MspInit+0x7c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011ee:	2304      	movs	r3, #4
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011fe:	2301      	movs	r3, #1
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <HAL_TIM_PWM_MspInit+0x80>)
 800120a:	f000 fb77 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	; 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40020000 	.word	0x40020000

08001220 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001240:	d11d      	bne.n	800127e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_TIM_MspPostInit+0xa8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a20      	ldr	r2, [pc, #128]	; (80012c8 <HAL_TIM_MspPostInit+0xa8>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HAL_TIM_MspPostInit+0xa8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800125a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800126c:	2301      	movs	r3, #1
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4815      	ldr	r0, [pc, #84]	; (80012cc <HAL_TIM_MspPostInit+0xac>)
 8001278:	f000 fb40 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800127c:	e020      	b.n	80012c0 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM9)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <HAL_TIM_MspPostInit+0xb0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d11b      	bne.n	80012c0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_TIM_MspPostInit+0xa8>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <HAL_TIM_MspPostInit+0xa8>)
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_TIM_MspPostInit+0xa8>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HCSR04_TRIG_Pin;
 80012a0:	2320      	movs	r3, #32
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80012b0:	2303      	movs	r3, #3
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	; (80012d4 <HAL_TIM_MspPostInit+0xb4>)
 80012bc:	f000 fb1e 	bl	80018fc <HAL_GPIO_Init>
}
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	; 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40014000 	.word	0x40014000
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0aa      	sub	sp, #168	; 0xa8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2284      	movs	r2, #132	; 0x84
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 fb39 	bl	8005970 <memset>
  if(huart->Instance==USART3)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a22      	ldr	r2, [pc, #136]	; (800138c <HAL_UART_MspInit+0xb4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d13c      	bne.n	8001382 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800130e:	2300      	movs	r3, #0
 8001310:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fad8 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001322:	f7ff feb1 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <HAL_UART_MspInit+0xb8>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a19      	ldr	r2, [pc, #100]	; (8001390 <HAL_UART_MspInit+0xb8>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_UART_MspInit+0xb8>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_UART_MspInit+0xb8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <HAL_UART_MspInit+0xb8>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_UART_MspInit+0xb8>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001356:	f44f 7340 	mov.w	r3, #768	; 0x300
 800135a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001364:	2301      	movs	r3, #1
 8001366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001370:	2307      	movs	r3, #7
 8001372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001376:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <HAL_UART_MspInit+0xbc>)
 800137e:	f000 fabd 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	37a8      	adds	r7, #168	; 0xa8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40004800 	.word	0x40004800
 8001390:	40023800 	.word	0x40023800
 8001394:	40020c00 	.word	0x40020c00

08001398 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0ac      	sub	sp, #176	; 0xb0
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	2284      	movs	r2, #132	; 0x84
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 fad9 	bl	8005970 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c6:	d159      	bne.n	800147c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 fa77 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80013e4:	f7ff fe50 	bl	8001088 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_PCD_MspInit+0xec>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_PCD_MspInit+0xec>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6313      	str	r3, [r2, #48]	; 0x30
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_PCD_MspInit+0xec>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001400:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800141a:	230a      	movs	r3, #10
 800141c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001424:	4619      	mov	r1, r3
 8001426:	4818      	ldr	r0, [pc, #96]	; (8001488 <HAL_PCD_MspInit+0xf0>)
 8001428:	f000 fa68 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800142c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001444:	4619      	mov	r1, r3
 8001446:	4810      	ldr	r0, [pc, #64]	; (8001488 <HAL_PCD_MspInit+0xf0>)
 8001448:	f000 fa58 	bl	80018fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_PCD_MspInit+0xec>)
 800144e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001450:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <HAL_PCD_MspInit+0xec>)
 8001452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001456:	6353      	str	r3, [r2, #52]	; 0x34
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_PCD_MspInit+0xec>)
 800145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <HAL_PCD_MspInit+0xec>)
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <HAL_PCD_MspInit+0xec>)
 800146a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146e:	6453      	str	r3, [r2, #68]	; 0x44
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <HAL_PCD_MspInit+0xec>)
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	37b0      	adds	r7, #176	; 0xb0
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 f8ba 	bl	8001650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <TIM1_CC_IRQHandler+0x10>)
 80014e6:	f001 ffea 	bl	80034be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000018c 	.word	0x2000018c

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f004 fa2c 	bl	8005980 <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	220c      	movs	r2, #12
 800152c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20050000 	.word	0x20050000
 8001554:	00000400 	.word	0x00000400
 8001558:	20000884 	.word	0x20000884
 800155c:	200009d8 	.word	0x200009d8

08001560 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <SystemInit+0x20>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <SystemInit+0x20>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800158a:	490e      	ldr	r1, [pc, #56]	; (80015c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015a0:	4c0b      	ldr	r4, [pc, #44]	; (80015d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ae:	f7ff ffd7 	bl	8001560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b2:	f004 f9eb 	bl	800598c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff f9c9 	bl	800094c <main>
  bx  lr    
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 80015c8:	080062fc 	.word	0x080062fc
  ldr r2, =_sbss
 80015cc:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 80015d0:	200009d4 	.word	0x200009d4

080015d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>

080015d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015da:	2003      	movs	r0, #3
 80015dc:	f000 f94c 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f000 f805 	bl	80015f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e6:	f7ff fd55 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x54>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x58>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	fbb3 f3f1 	udiv	r3, r3, r1
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f967 	bl	80018e2 <HAL_SYSTICK_Config>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e00e      	b.n	800163c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d80a      	bhi.n	800163a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f000 f92f 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001630:	4a06      	ldr	r2, [pc, #24]	; (800164c <HAL_InitTick+0x5c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000008c 	.word	0x2000008c
 8001648:	20000094 	.word	0x20000094
 800164c:	20000090 	.word	0x20000090

08001650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x20>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x24>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_IncTick+0x24>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000094 	.word	0x20000094
 8001674:	20000888 	.word	0x20000888

08001678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <HAL_GetTick+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000888 	.word	0x20000888

08001690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff ffee 	bl	8001678 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a8:	d005      	beq.n	80016b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_Delay+0x44>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016b6:	bf00      	nop
 80016b8:	f7ff ffde 	bl	8001678 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d8f7      	bhi.n	80016b8 <HAL_Delay+0x28>
  {
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000094 	.word	0x20000094

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <__NVIC_SetPriorityGrouping+0x40>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	4313      	orrs	r3, r2
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x40>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00
 800171c:	05fa0000 	.word	0x05fa0000

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4907      	ldr	r1, [pc, #28]	; (8001774 <__NVIC_EnableIRQ+0x38>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	; (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	; (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f7ff ff8e 	bl	8001778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff29 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff3e 	bl	8001720 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff8e 	bl	80017cc <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5d 	bl	8001778 <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff31 	bl	800173c <__NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffa2 	bl	8001834 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e175      	b.n	8001c08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8164 	bne.w	8001c02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d005      	beq.n	8001952 <HAL_GPIO_Init+0x56>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d130      	bne.n	80019b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 0201 	and.w	r2, r3, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d017      	beq.n	80019f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d123      	bne.n	8001a44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	08da      	lsrs	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3208      	adds	r2, #8
 8001a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	08da      	lsrs	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3208      	adds	r2, #8
 8001a3e:	69b9      	ldr	r1, [r7, #24]
 8001a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0203 	and.w	r2, r3, #3
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80be 	beq.w	8001c02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4a65      	ldr	r2, [pc, #404]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a9e:	4a61      	ldr	r2, [pc, #388]	; (8001c24 <HAL_GPIO_Init+0x328>)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_GPIO_Init+0x32c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d037      	beq.n	8001b3a <HAL_GPIO_Init+0x23e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <HAL_GPIO_Init+0x330>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d031      	beq.n	8001b36 <HAL_GPIO_Init+0x23a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a56      	ldr	r2, [pc, #344]	; (8001c30 <HAL_GPIO_Init+0x334>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d02b      	beq.n	8001b32 <HAL_GPIO_Init+0x236>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a55      	ldr	r2, [pc, #340]	; (8001c34 <HAL_GPIO_Init+0x338>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d025      	beq.n	8001b2e <HAL_GPIO_Init+0x232>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a54      	ldr	r2, [pc, #336]	; (8001c38 <HAL_GPIO_Init+0x33c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01f      	beq.n	8001b2a <HAL_GPIO_Init+0x22e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a53      	ldr	r2, [pc, #332]	; (8001c3c <HAL_GPIO_Init+0x340>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d019      	beq.n	8001b26 <HAL_GPIO_Init+0x22a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <HAL_GPIO_Init+0x344>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_GPIO_Init+0x226>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a51      	ldr	r2, [pc, #324]	; (8001c44 <HAL_GPIO_Init+0x348>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00d      	beq.n	8001b1e <HAL_GPIO_Init+0x222>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a50      	ldr	r2, [pc, #320]	; (8001c48 <HAL_GPIO_Init+0x34c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0x21e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4f      	ldr	r2, [pc, #316]	; (8001c4c <HAL_GPIO_Init+0x350>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_Init+0x21a>
 8001b12:	2309      	movs	r3, #9
 8001b14:	e012      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b16:	230a      	movs	r3, #10
 8001b18:	e010      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	e00e      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b1e:	2307      	movs	r3, #7
 8001b20:	e00c      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b22:	2306      	movs	r3, #6
 8001b24:	e00a      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b26:	2305      	movs	r3, #5
 8001b28:	e008      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e004      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	f002 0203 	and.w	r2, r2, #3
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	4093      	lsls	r3, r2
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b4c:	4935      	ldr	r1, [pc, #212]	; (8001c24 <HAL_GPIO_Init+0x328>)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7e:	4a34      	ldr	r2, [pc, #208]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba8:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3301      	adds	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	f67f ae86 	bls.w	800191c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40013800 	.word	0x40013800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40021400 	.word	0x40021400
 8001c40:	40021800 	.word	0x40021800
 8001c44:	40021c00 	.word	0x40021c00
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40022400 	.word	0x40022400
 8001c50:	40013c00 	.word	0x40013c00

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c70:	e003      	b.n	8001c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	041a      	lsls	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c88:	b08f      	sub	sp, #60	; 0x3c
 8001c8a:	af0a      	add	r7, sp, #40	; 0x28
 8001c8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e116      	b.n	8001ec6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fb70 	bl	8001398 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2203      	movs	r2, #3
 8001cbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 fb8e 	bl	80053f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	687e      	ldr	r6, [r7, #4]
 8001ce4:	466d      	mov	r5, sp
 8001ce6:	f106 0410 	add.w	r4, r6, #16
 8001cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cfa:	1d33      	adds	r3, r6, #4
 8001cfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfe:	6838      	ldr	r0, [r7, #0]
 8001d00:	f003 fb22 	bl	8005348 <USB_CoreInit>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0d7      	b.n	8001ec6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fb7c 	bl	800541a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
 8001d26:	e04a      	b.n	8001dbe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	333d      	adds	r3, #61	; 0x3d
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	333c      	adds	r3, #60	; 0x3c
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	b298      	uxth	r0, r3
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	3344      	adds	r3, #68	; 0x44
 8001d64:	4602      	mov	r2, r0
 8001d66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	3340      	adds	r3, #64	; 0x40
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	3348      	adds	r3, #72	; 0x48
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	334c      	adds	r3, #76	; 0x4c
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	3354      	adds	r3, #84	; 0x54
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3af      	bcc.n	8001d28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e044      	b.n	8001e58 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	3301      	adds	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d3b5      	bcc.n	8001dce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	687e      	ldr	r6, [r7, #4]
 8001e6a:	466d      	mov	r5, sp
 8001e6c:	f106 0410 	add.w	r4, r6, #16
 8001e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e80:	1d33      	adds	r3, r6, #4
 8001e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e84:	6838      	ldr	r0, [r7, #0]
 8001e86:	f003 fb15 	bl	80054b4 <USB_DevInit>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e014      	b.n	8001ec6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d102      	bne.n	8001eba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f80b 	bl	8001ed0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fcd3 	bl	800586a <USB_DevDisconnect>

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001ed0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_PCDEx_ActivateLPM+0x44>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	10000003 	.word	0x10000003

08001f18 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40007000 	.word	0x40007000

08001f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e291      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8087 	beq.w	800206a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f5c:	4b96      	ldr	r3, [pc, #600]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d00c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f68:	4b93      	ldr	r3, [pc, #588]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d112      	bne.n	8001f9a <HAL_RCC_OscConfig+0x62>
 8001f74:	4b90      	ldr	r3, [pc, #576]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f80:	d10b      	bne.n	8001f9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f82:	4b8d      	ldr	r3, [pc, #564]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d06c      	beq.n	8002068 <HAL_RCC_OscConfig+0x130>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d168      	bne.n	8002068 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e26b      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x7a>
 8001fa4:	4b84      	ldr	r3, [pc, #528]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a83      	ldr	r2, [pc, #524]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	e02e      	b.n	8002010 <HAL_RCC_OscConfig+0xd8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x9c>
 8001fba:	4b7f      	ldr	r3, [pc, #508]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a7e      	ldr	r2, [pc, #504]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b7c      	ldr	r3, [pc, #496]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7b      	ldr	r2, [pc, #492]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e01d      	b.n	8002010 <HAL_RCC_OscConfig+0xd8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xc0>
 8001fde:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a75      	ldr	r2, [pc, #468]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b73      	ldr	r3, [pc, #460]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a72      	ldr	r2, [pc, #456]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xd8>
 8001ff8:	4b6f      	ldr	r3, [pc, #444]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a6e      	ldr	r2, [pc, #440]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b6c      	ldr	r3, [pc, #432]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a6b      	ldr	r2, [pc, #428]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff fb2e 	bl	8001678 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7ff fb2a 	bl	8001678 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e21f      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0xe8>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff fb1a 	bl	8001678 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff fb16 	bl	8001678 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e20b      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x110>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d069      	beq.n	800214a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002076:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002082:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b08      	cmp	r3, #8
 800208c:	d11c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x190>
 800208e:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d116      	bne.n	80020c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x17a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e1df      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	493d      	ldr	r1, [pc, #244]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	e040      	b.n	800214a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d023      	beq.n	8002118 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d0:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a38      	ldr	r2, [pc, #224]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff facc 	bl	8001678 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e4:	f7ff fac8 	bl	8001678 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1bd      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f6:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4929      	ldr	r1, [pc, #164]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
 8002116:	e018      	b.n	800214a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff faa8 	bl	8001678 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff faa4 	bl	8001678 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e199      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d038      	beq.n	80021c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d019      	beq.n	8002192 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002162:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7ff fa85 	bl	8001678 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002172:	f7ff fa81 	bl	8001678 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e176      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x23a>
 8002190:	e01a      	b.n	80021c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002196:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219e:	f7ff fa6b 	bl	8001678 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a6:	f7ff fa67 	bl	8001678 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d903      	bls.n	80021bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e15c      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
 80021b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	4b91      	ldr	r3, [pc, #580]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80021be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ee      	bne.n	80021a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80a4 	beq.w	800231e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d6:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10d      	bne.n	80021fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b88      	ldr	r3, [pc, #544]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a87      	ldr	r2, [pc, #540]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b85      	ldr	r3, [pc, #532]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fe:	4b82      	ldr	r3, [pc, #520]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800220a:	4b7f      	ldr	r3, [pc, #508]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a7e      	ldr	r2, [pc, #504]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7ff fa2f 	bl	8001678 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7ff fa2b 	bl	8001678 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e120      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002230:	4b75      	ldr	r3, [pc, #468]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x31a>
 8002244:	4b6f      	ldr	r3, [pc, #444]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a6e      	ldr	r2, [pc, #440]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
 8002250:	e02d      	b.n	80022ae <HAL_RCC_OscConfig+0x376>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x33c>
 800225a:	4b6a      	ldr	r3, [pc, #424]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	4a69      	ldr	r2, [pc, #420]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6713      	str	r3, [r2, #112]	; 0x70
 8002266:	4b67      	ldr	r3, [pc, #412]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	4a66      	ldr	r2, [pc, #408]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	6713      	str	r3, [r2, #112]	; 0x70
 8002272:	e01c      	b.n	80022ae <HAL_RCC_OscConfig+0x376>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b05      	cmp	r3, #5
 800227a:	d10c      	bne.n	8002296 <HAL_RCC_OscConfig+0x35e>
 800227c:	4b61      	ldr	r3, [pc, #388]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a60      	ldr	r2, [pc, #384]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
 8002288:	4b5e      	ldr	r3, [pc, #376]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a5d      	ldr	r2, [pc, #372]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
 8002294:	e00b      	b.n	80022ae <HAL_RCC_OscConfig+0x376>
 8002296:	4b5b      	ldr	r3, [pc, #364]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a5a      	ldr	r2, [pc, #360]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70
 80022a2:	4b58      	ldr	r3, [pc, #352]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a57      	ldr	r2, [pc, #348]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b6:	f7ff f9df 	bl	8001678 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7ff f9db 	bl	8001678 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0ce      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ee      	beq.n	80022be <HAL_RCC_OscConfig+0x386>
 80022e0:	e014      	b.n	800230c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e2:	f7ff f9c9 	bl	8001678 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7ff f9c5 	bl	8001678 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0b8      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002300:	4b40      	ldr	r3, [pc, #256]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ee      	bne.n	80022ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002312:	4b3c      	ldr	r3, [pc, #240]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80a4 	beq.w	8002470 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d06b      	beq.n	800240c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d149      	bne.n	80023d0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a30      	ldr	r2, [pc, #192]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff f996 	bl	8001678 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff f992 	bl	8001678 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e087      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	4b28      	ldr	r3, [pc, #160]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	019b      	lsls	r3, r3, #6
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	3b01      	subs	r3, #1
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	4313      	orrs	r3, r2
 8002394:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 8002396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800239a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a18      	ldr	r2, [pc, #96]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80023a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7ff f966 	bl	8001678 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7ff f962 	bl	8001678 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e057      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x478>
 80023ce:	e04f      	b.n	8002470 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80023d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7ff f94c 	bl	8001678 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e4:	f7ff f948 	bl	8001678 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e03d      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f6:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_RCC_OscConfig+0x4cc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4ac>
 8002402:	e035      	b.n	8002470 <HAL_RCC_OscConfig+0x538>
 8002404:	40023800 	.word	0x40023800
 8002408:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_RCC_OscConfig+0x544>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d028      	beq.n	800246c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d121      	bne.n	800246c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002432:	429a      	cmp	r2, r3
 8002434:	d11a      	bne.n	800246c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800243c:	4013      	ands	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002442:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002444:	4293      	cmp	r3, r2
 8002446:	d111      	bne.n	800246c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	085b      	lsrs	r3, r3, #1
 8002454:	3b01      	subs	r3, #1
 8002456:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d107      	bne.n	800246c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800

08002480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0d0      	b.n	800263a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b6a      	ldr	r3, [pc, #424]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d910      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b67      	ldr	r3, [pc, #412]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 020f 	bic.w	r2, r3, #15
 80024ae:	4965      	ldr	r1, [pc, #404]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0b8      	b.n	800263a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e0:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a58      	ldr	r2, [pc, #352]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 80024e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f8:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a52      	ldr	r2, [pc, #328]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 80024fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002502:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	494d      	ldr	r1, [pc, #308]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d040      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d115      	bne.n	8002562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e07f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e073      	b.n	800263a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06b      	b.n	800263a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4936      	ldr	r1, [pc, #216]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002574:	f7ff f880 	bl	8001678 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7ff f87c 	bl	8001678 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e053      	b.n	800263a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d210      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 020f 	bic.w	r2, r3, #15
 80025ba:	4922      	ldr	r1, [pc, #136]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e032      	b.n	800263a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4916      	ldr	r1, [pc, #88]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	490e      	ldr	r1, [pc, #56]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002612:	f000 f821 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	490a      	ldr	r1, [pc, #40]	; (800264c <HAL_RCC_ClockConfig+0x1cc>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_RCC_ClockConfig+0x1d0>)
 800262c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1d4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe ffdc 	bl	80015f0 <HAL_InitTick>

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023c00 	.word	0x40023c00
 8002648:	40023800 	.word	0x40023800
 800264c:	080062a0 	.word	0x080062a0
 8002650:	2000008c 	.word	0x2000008c
 8002654:	20000090 	.word	0x20000090

08002658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800265c:	b094      	sub	sp, #80	; 0x50
 800265e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	647b      	str	r3, [r7, #68]	; 0x44
 8002664:	2300      	movs	r3, #0
 8002666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002668:	2300      	movs	r3, #0
 800266a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002670:	4b79      	ldr	r3, [pc, #484]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d00d      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x40>
 800267c:	2b08      	cmp	r3, #8
 800267e:	f200 80e1 	bhi.w	8002844 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x34>
 8002686:	2b04      	cmp	r3, #4
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x3a>
 800268a:	e0db      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b73      	ldr	r3, [pc, #460]	; (800285c <HAL_RCC_GetSysClockFreq+0x204>)
 800268e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002690:	e0db      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002692:	4b73      	ldr	r3, [pc, #460]	; (8002860 <HAL_RCC_GetSysClockFreq+0x208>)
 8002694:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002696:	e0d8      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002698:	4b6f      	ldr	r3, [pc, #444]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026a2:	4b6d      	ldr	r3, [pc, #436]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d063      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ae:	4b6a      	ldr	r3, [pc, #424]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	099b      	lsrs	r3, r3, #6
 80026b4:	2200      	movs	r2, #0
 80026b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c0:	633b      	str	r3, [r7, #48]	; 0x30
 80026c2:	2300      	movs	r3, #0
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
 80026c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026ca:	4622      	mov	r2, r4
 80026cc:	462b      	mov	r3, r5
 80026ce:	f04f 0000 	mov.w	r0, #0
 80026d2:	f04f 0100 	mov.w	r1, #0
 80026d6:	0159      	lsls	r1, r3, #5
 80026d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026dc:	0150      	lsls	r0, r2, #5
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4621      	mov	r1, r4
 80026e4:	1a51      	subs	r1, r2, r1
 80026e6:	6139      	str	r1, [r7, #16]
 80026e8:	4629      	mov	r1, r5
 80026ea:	eb63 0301 	sbc.w	r3, r3, r1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026fc:	4659      	mov	r1, fp
 80026fe:	018b      	lsls	r3, r1, #6
 8002700:	4651      	mov	r1, sl
 8002702:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002706:	4651      	mov	r1, sl
 8002708:	018a      	lsls	r2, r1, #6
 800270a:	4651      	mov	r1, sl
 800270c:	ebb2 0801 	subs.w	r8, r2, r1
 8002710:	4659      	mov	r1, fp
 8002712:	eb63 0901 	sbc.w	r9, r3, r1
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800272a:	4690      	mov	r8, r2
 800272c:	4699      	mov	r9, r3
 800272e:	4623      	mov	r3, r4
 8002730:	eb18 0303 	adds.w	r3, r8, r3
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	462b      	mov	r3, r5
 8002738:	eb49 0303 	adc.w	r3, r9, r3
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800274a:	4629      	mov	r1, r5
 800274c:	024b      	lsls	r3, r1, #9
 800274e:	4621      	mov	r1, r4
 8002750:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002754:	4621      	mov	r1, r4
 8002756:	024a      	lsls	r2, r1, #9
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275e:	2200      	movs	r2, #0
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
 8002762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002764:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002768:	f7fd fda2 	bl	80002b0 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002774:	e058      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002776:	4b38      	ldr	r3, [pc, #224]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	099b      	lsrs	r3, r3, #6
 800277c:	2200      	movs	r2, #0
 800277e:	4618      	mov	r0, r3
 8002780:	4611      	mov	r1, r2
 8002782:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
 800278c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002790:	4642      	mov	r2, r8
 8002792:	464b      	mov	r3, r9
 8002794:	f04f 0000 	mov.w	r0, #0
 8002798:	f04f 0100 	mov.w	r1, #0
 800279c:	0159      	lsls	r1, r3, #5
 800279e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a2:	0150      	lsls	r0, r2, #5
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4641      	mov	r1, r8
 80027aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ae:	4649      	mov	r1, r9
 80027b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027c8:	ebb2 040a 	subs.w	r4, r2, sl
 80027cc:	eb63 050b 	sbc.w	r5, r3, fp
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	00eb      	lsls	r3, r5, #3
 80027da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027de:	00e2      	lsls	r2, r4, #3
 80027e0:	4614      	mov	r4, r2
 80027e2:	461d      	mov	r5, r3
 80027e4:	4643      	mov	r3, r8
 80027e6:	18e3      	adds	r3, r4, r3
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	464b      	mov	r3, r9
 80027ec:	eb45 0303 	adc.w	r3, r5, r3
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027fe:	4629      	mov	r1, r5
 8002800:	028b      	lsls	r3, r1, #10
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002808:	4621      	mov	r1, r4
 800280a:	028a      	lsls	r2, r1, #10
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002812:	2200      	movs	r2, #0
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	61fa      	str	r2, [r7, #28]
 8002818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800281c:	f7fd fd48 	bl	80002b0 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	3301      	adds	r3, #1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800283a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002842:	e002      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetSysClockFreq+0x204>)
 8002846:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800284c:	4618      	mov	r0, r3
 800284e:	3750      	adds	r7, #80	; 0x50
 8002850:	46bd      	mov	sp, r7
 8002852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	00f42400 	.word	0x00f42400
 8002860:	007a1200 	.word	0x007a1200

08002864 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_RCC_GetHCLKFreq+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	2000008c 	.word	0x2000008c

0800287c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002880:	f7ff fff0 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0a9b      	lsrs	r3, r3, #10
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	080062b0 	.word	0x080062b0

080028a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028a8:	f7ff ffdc 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0b5b      	lsrs	r3, r3, #13
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4903      	ldr	r1, [pc, #12]	; (80028c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800
 80028c8:	080062b0 	.word	0x080062b0

080028cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d012      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028f4:	4b69      	ldr	r3, [pc, #420]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a68      	ldr	r2, [pc, #416]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028fe:	6093      	str	r3, [r2, #8]
 8002900:	4b66      	ldr	r3, [pc, #408]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002908:	4964      	ldr	r1, [pc, #400]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002916:	2301      	movs	r3, #1
 8002918:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d017      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002926:	4b5d      	ldr	r3, [pc, #372]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800292c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	4959      	ldr	r1, [pc, #356]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002944:	d101      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002946:	2301      	movs	r3, #1
 8002948:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d017      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002962:	4b4e      	ldr	r3, [pc, #312]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002968:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	494a      	ldr	r1, [pc, #296]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002980:	d101      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002982:	2301      	movs	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800299e:	2301      	movs	r3, #1
 80029a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 808b 	beq.w	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b0:	4b3a      	ldr	r3, [pc, #232]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	4a39      	ldr	r2, [pc, #228]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ba:	6413      	str	r3, [r2, #64]	; 0x40
 80029bc:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029c8:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a34      	ldr	r2, [pc, #208]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d4:	f7fe fe50 	bl	8001678 <HAL_GetTick>
 80029d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029dc:	f7fe fe4c 	bl	8001678 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e357      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029ee:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029fa:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d035      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d02e      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a18:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a22:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	4a1a      	ldr	r2, [pc, #104]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a3a:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d114      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fe14 	bl	8001678 <HAL_GetTick>
 8002a50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe fe10 	bl	8001678 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e319      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0ee      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a82:	d111      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a92:	400b      	ands	r3, r1
 8002a94:	4901      	ldr	r1, [pc, #4]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	0ffffcff 	.word	0x0ffffcff
 8002aa8:	4baa      	ldr	r3, [pc, #680]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4aa9      	ldr	r2, [pc, #676]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ab2:	6093      	str	r3, [r2, #8]
 8002ab4:	4ba7      	ldr	r3, [pc, #668]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	49a4      	ldr	r1, [pc, #656]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d010      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ad2:	4ba0      	ldr	r3, [pc, #640]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad8:	4a9e      	ldr	r2, [pc, #632]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ade:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ae2:	4b9c      	ldr	r3, [pc, #624]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aec:	4999      	ldr	r1, [pc, #612]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b00:	4b94      	ldr	r3, [pc, #592]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b0e:	4991      	ldr	r1, [pc, #580]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b22:	4b8c      	ldr	r3, [pc, #560]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b30:	4988      	ldr	r1, [pc, #544]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b44:	4b83      	ldr	r3, [pc, #524]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b52:	4980      	ldr	r1, [pc, #512]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b66:	4b7b      	ldr	r3, [pc, #492]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	4977      	ldr	r1, [pc, #476]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b88:	4b72      	ldr	r3, [pc, #456]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	496f      	ldr	r1, [pc, #444]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002baa:	4b6a      	ldr	r3, [pc, #424]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	f023 020c 	bic.w	r2, r3, #12
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb8:	4966      	ldr	r1, [pc, #408]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bcc:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	495e      	ldr	r1, [pc, #376]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bee:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfc:	4955      	ldr	r1, [pc, #340]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	494d      	ldr	r1, [pc, #308]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c32:	4b48      	ldr	r3, [pc, #288]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	4944      	ldr	r1, [pc, #272]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c54:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	493c      	ldr	r1, [pc, #240]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c84:	4933      	ldr	r1, [pc, #204]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c98:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca6:	492b      	ldr	r1, [pc, #172]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d011      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cba:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cc8:	4922      	ldr	r1, [pc, #136]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cd8:	d101      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cea:	2301      	movs	r3, #1
 8002cec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cfa:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d08:	4912      	ldr	r1, [pc, #72]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d1c:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d2c:	4909      	ldr	r1, [pc, #36]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d006      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80d9 	beq.w	8002efa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d48:	4b02      	ldr	r3, [pc, #8]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a01      	ldr	r2, [pc, #4]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d52:	e001      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002d54:	40023800 	.word	0x40023800
 8002d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5a:	f7fe fc8d 	bl	8001678 <HAL_GetTick>
 8002d5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d62:	f7fe fc89 	bl	8001678 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b64      	cmp	r3, #100	; 0x64
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e194      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d74:	4b6c      	ldr	r3, [pc, #432]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d021      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d11d      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d94:	4b64      	ldr	r3, [pc, #400]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002da2:	4b61      	ldr	r3, [pc, #388]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da8:	0e1b      	lsrs	r3, r3, #24
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	019a      	lsls	r2, r3, #6
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	041b      	lsls	r3, r3, #16
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	061b      	lsls	r3, r3, #24
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	071b      	lsls	r3, r3, #28
 8002dc8:	4957      	ldr	r1, [pc, #348]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de4:	d00a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d02e      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfa:	d129      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dfc:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e02:	0c1b      	lsrs	r3, r3, #16
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e0a:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e10:	0f1b      	lsrs	r3, r3, #28
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	019a      	lsls	r2, r3, #6
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	071b      	lsls	r3, r3, #28
 8002e30:	493d      	ldr	r1, [pc, #244]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e38:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e3e:	f023 021f 	bic.w	r2, r3, #31
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	3b01      	subs	r3, #1
 8002e48:	4937      	ldr	r1, [pc, #220]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01d      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e5c:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e62:	0e1b      	lsrs	r3, r3, #24
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e70:	0f1b      	lsrs	r3, r3, #28
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	019a      	lsls	r2, r3, #6
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	041b      	lsls	r3, r3, #16
 8002e84:	431a      	orrs	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	061b      	lsls	r3, r3, #24
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	071b      	lsls	r3, r3, #28
 8002e90:	4925      	ldr	r1, [pc, #148]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d011      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	019a      	lsls	r2, r3, #6
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	071b      	lsls	r3, r3, #28
 8002ec0:	4919      	ldr	r1, [pc, #100]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ece:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed4:	f7fe fbd0 	bl	8001678 <HAL_GetTick>
 8002ed8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002edc:	f7fe fbcc 	bl	8001678 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e0d7      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	f040 80cd 	bne.w	800309c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a08      	ldr	r2, [pc, #32]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0e:	f7fe fbb3 	bl	8001678 <HAL_GetTick>
 8002f12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f16:	f7fe fbaf 	bl	8001678 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b64      	cmp	r3, #100	; 0x64
 8002f22:	d903      	bls.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e0ba      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002f28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f2c:	4b5e      	ldr	r3, [pc, #376]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f38:	d0ed      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02e      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d12a      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f62:	4b51      	ldr	r3, [pc, #324]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f70:	4b4d      	ldr	r3, [pc, #308]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	0f1b      	lsrs	r3, r3, #28
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	019a      	lsls	r2, r3, #6
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	041b      	lsls	r3, r3, #16
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	061b      	lsls	r3, r3, #24
 8002f90:	431a      	orrs	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	071b      	lsls	r3, r3, #28
 8002f96:	4944      	ldr	r1, [pc, #272]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f9e:	4b42      	ldr	r3, [pc, #264]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	493d      	ldr	r1, [pc, #244]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d022      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fcc:	d11d      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fce:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	0e1b      	lsrs	r3, r3, #24
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fdc:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	0f1b      	lsrs	r3, r3, #28
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	019a      	lsls	r2, r3, #6
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	061b      	lsls	r3, r3, #24
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	071b      	lsls	r3, r3, #28
 8003002:	4929      	ldr	r1, [pc, #164]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d028      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	0e1b      	lsrs	r3, r3, #24
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003024:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	0c1b      	lsrs	r3, r3, #16
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	019a      	lsls	r2, r3, #6
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	041b      	lsls	r3, r3, #16
 800303c:	431a      	orrs	r2, r3
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	071b      	lsls	r3, r3, #28
 800304a:	4917      	ldr	r1, [pc, #92]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	4911      	ldr	r1, [pc, #68]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003074:	f7fe fb00 	bl	8001678 <HAL_GetTick>
 8003078:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800307c:	f7fe fafc 	bl	8001678 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e007      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800309a:	d1ef      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800

080030ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e049      	b.n	8003152 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fe f802 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f000 fe2e 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e049      	b.n	8003200 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d106      	bne.n	8003186 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7fe f80b 	bl	800119c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3304      	adds	r3, #4
 8003196:	4619      	mov	r1, r3
 8003198:	4610      	mov	r0, r2
 800319a:	f000 fdd7 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_TIM_PWM_Start+0x24>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	bf14      	ite	ne
 8003224:	2301      	movne	r3, #1
 8003226:	2300      	moveq	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e03c      	b.n	80032a6 <HAL_TIM_PWM_Start+0x9e>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b04      	cmp	r3, #4
 8003230:	d109      	bne.n	8003246 <HAL_TIM_PWM_Start+0x3e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b01      	cmp	r3, #1
 800323c:	bf14      	ite	ne
 800323e:	2301      	movne	r3, #1
 8003240:	2300      	moveq	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	e02f      	b.n	80032a6 <HAL_TIM_PWM_Start+0x9e>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b08      	cmp	r3, #8
 800324a:	d109      	bne.n	8003260 <HAL_TIM_PWM_Start+0x58>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	bf14      	ite	ne
 8003258:	2301      	movne	r3, #1
 800325a:	2300      	moveq	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	e022      	b.n	80032a6 <HAL_TIM_PWM_Start+0x9e>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d109      	bne.n	800327a <HAL_TIM_PWM_Start+0x72>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b01      	cmp	r3, #1
 8003270:	bf14      	ite	ne
 8003272:	2301      	movne	r3, #1
 8003274:	2300      	moveq	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	e015      	b.n	80032a6 <HAL_TIM_PWM_Start+0x9e>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b10      	cmp	r3, #16
 800327e:	d109      	bne.n	8003294 <HAL_TIM_PWM_Start+0x8c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	bf14      	ite	ne
 800328c:	2301      	movne	r3, #1
 800328e:	2300      	moveq	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e008      	b.n	80032a6 <HAL_TIM_PWM_Start+0x9e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	bf14      	ite	ne
 80032a0:	2301      	movne	r3, #1
 80032a2:	2300      	moveq	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e092      	b.n	80033d4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d104      	bne.n	80032be <HAL_TIM_PWM_Start+0xb6>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032bc:	e023      	b.n	8003306 <HAL_TIM_PWM_Start+0xfe>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d104      	bne.n	80032ce <HAL_TIM_PWM_Start+0xc6>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032cc:	e01b      	b.n	8003306 <HAL_TIM_PWM_Start+0xfe>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d104      	bne.n	80032de <HAL_TIM_PWM_Start+0xd6>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032dc:	e013      	b.n	8003306 <HAL_TIM_PWM_Start+0xfe>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b0c      	cmp	r3, #12
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_PWM_Start+0xe6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032ec:	e00b      	b.n	8003306 <HAL_TIM_PWM_Start+0xfe>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_PWM_Start+0xf6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032fc:	e003      	b.n	8003306 <HAL_TIM_PWM_Start+0xfe>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2201      	movs	r2, #1
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fa72 	bl	80047f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a30      	ldr	r2, [pc, #192]	; (80033dc <HAL_TIM_PWM_Start+0x1d4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_TIM_PWM_Start+0x120>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a2f      	ldr	r2, [pc, #188]	; (80033e0 <HAL_TIM_PWM_Start+0x1d8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d101      	bne.n	800332c <HAL_TIM_PWM_Start+0x124>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_TIM_PWM_Start+0x126>
 800332c:	2300      	movs	r3, #0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d007      	beq.n	8003342 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a25      	ldr	r2, [pc, #148]	; (80033dc <HAL_TIM_PWM_Start+0x1d4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d022      	beq.n	8003392 <HAL_TIM_PWM_Start+0x18a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003354:	d01d      	beq.n	8003392 <HAL_TIM_PWM_Start+0x18a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <HAL_TIM_PWM_Start+0x1dc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d018      	beq.n	8003392 <HAL_TIM_PWM_Start+0x18a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a20      	ldr	r2, [pc, #128]	; (80033e8 <HAL_TIM_PWM_Start+0x1e0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_TIM_PWM_Start+0x18a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <HAL_TIM_PWM_Start+0x1e4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_TIM_PWM_Start+0x18a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <HAL_TIM_PWM_Start+0x1d8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_TIM_PWM_Start+0x18a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_TIM_PWM_Start+0x1e8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_TIM_PWM_Start+0x18a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a19      	ldr	r2, [pc, #100]	; (80033f4 <HAL_TIM_PWM_Start+0x1ec>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d115      	bne.n	80033be <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <HAL_TIM_PWM_Start+0x1f0>)
 800339a:	4013      	ands	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b06      	cmp	r3, #6
 80033a2:	d015      	beq.n	80033d0 <HAL_TIM_PWM_Start+0x1c8>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033aa:	d011      	beq.n	80033d0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033bc:	e008      	b.n	80033d0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e000      	b.n	80033d2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40010000 	.word	0x40010000
 80033e0:	40010400 	.word	0x40010400
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40001800 	.word	0x40001800
 80033f8:	00010007 	.word	0x00010007

080033fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e049      	b.n	80034a2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f841 	bl	80034aa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3304      	adds	r3, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f000 fc86 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d122      	bne.n	800351a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d11b      	bne.n	800351a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0202 	mvn.w	r2, #2
 80034ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7fd f915 	bl	8000730 <HAL_TIM_IC_CaptureCallback>
 8003506:	e005      	b.n	8003514 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fc01 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fc08 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b04      	cmp	r3, #4
 8003526:	d122      	bne.n	800356e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b04      	cmp	r3, #4
 8003534:	d11b      	bne.n	800356e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f06f 0204 	mvn.w	r2, #4
 800353e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7fd f8eb 	bl	8000730 <HAL_TIM_IC_CaptureCallback>
 800355a:	e005      	b.n	8003568 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fbd7 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fbde 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b08      	cmp	r3, #8
 800357a:	d122      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b08      	cmp	r3, #8
 8003588:	d11b      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f06f 0208 	mvn.w	r2, #8
 8003592:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2204      	movs	r2, #4
 8003598:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fd f8c1 	bl	8000730 <HAL_TIM_IC_CaptureCallback>
 80035ae:	e005      	b.n	80035bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fbad 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fbb4 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b10      	cmp	r3, #16
 80035ce:	d122      	bne.n	8003616 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b10      	cmp	r3, #16
 80035dc:	d11b      	bne.n	8003616 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f06f 0210 	mvn.w	r2, #16
 80035e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2208      	movs	r2, #8
 80035ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7fd f897 	bl	8000730 <HAL_TIM_IC_CaptureCallback>
 8003602:	e005      	b.n	8003610 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fb83 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fb8a 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b01      	cmp	r3, #1
 8003622:	d10e      	bne.n	8003642 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d107      	bne.n	8003642 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f06f 0201 	mvn.w	r2, #1
 800363a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fb5d 	bl	8003cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d10e      	bne.n	800366e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365a:	2b80      	cmp	r3, #128	; 0x80
 800365c:	d107      	bne.n	800366e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f001 f983 	bl	8004974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367c:	d10e      	bne.n	800369c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003688:	2b80      	cmp	r3, #128	; 0x80
 800368a:	d107      	bne.n	800369c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f001 f976 	bl	8004988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d10e      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b40      	cmp	r3, #64	; 0x40
 80036b6:	d107      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fb38 	bl	8003d38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d10e      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d107      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0220 	mvn.w	r2, #32
 80036ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f001 f936 	bl	8004960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003716:	2302      	movs	r3, #2
 8003718:	e088      	b.n	800382c <HAL_TIM_IC_ConfigChannel+0x130>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003738:	f000 fe9a 	bl	8004470 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 020c 	bic.w	r2, r2, #12
 800374a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6999      	ldr	r1, [r3, #24]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	619a      	str	r2, [r3, #24]
 800375e:	e060      	b.n	8003822 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b04      	cmp	r3, #4
 8003764:	d11c      	bne.n	80037a0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003776:	f000 ff1e 	bl	80045b6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003788:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6999      	ldr	r1, [r3, #24]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	021a      	lsls	r2, r3, #8
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	619a      	str	r2, [r3, #24]
 800379e:	e040      	b.n	8003822 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d11b      	bne.n	80037de <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80037b6:	f000 ff6b 	bl	8004690 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 020c 	bic.w	r2, r2, #12
 80037c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69d9      	ldr	r1, [r3, #28]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	61da      	str	r2, [r3, #28]
 80037dc:	e021      	b.n	8003822 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	d11c      	bne.n	800381e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80037f4:	f000 ff88 	bl	8004708 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003806:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69d9      	ldr	r1, [r3, #28]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	021a      	lsls	r2, r3, #8
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	61da      	str	r2, [r3, #28]
 800381c:	e001      	b.n	8003822 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800382a:	7dfb      	ldrb	r3, [r7, #23]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800384e:	2302      	movs	r3, #2
 8003850:	e0ff      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b14      	cmp	r3, #20
 800385e:	f200 80f0 	bhi.w	8003a42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003862:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	080038bd 	.word	0x080038bd
 800386c:	08003a43 	.word	0x08003a43
 8003870:	08003a43 	.word	0x08003a43
 8003874:	08003a43 	.word	0x08003a43
 8003878:	080038fd 	.word	0x080038fd
 800387c:	08003a43 	.word	0x08003a43
 8003880:	08003a43 	.word	0x08003a43
 8003884:	08003a43 	.word	0x08003a43
 8003888:	0800393f 	.word	0x0800393f
 800388c:	08003a43 	.word	0x08003a43
 8003890:	08003a43 	.word	0x08003a43
 8003894:	08003a43 	.word	0x08003a43
 8003898:	0800397f 	.word	0x0800397f
 800389c:	08003a43 	.word	0x08003a43
 80038a0:	08003a43 	.word	0x08003a43
 80038a4:	08003a43 	.word	0x08003a43
 80038a8:	080039c1 	.word	0x080039c1
 80038ac:	08003a43 	.word	0x08003a43
 80038b0:	08003a43 	.word	0x08003a43
 80038b4:	08003a43 	.word	0x08003a43
 80038b8:	08003a01 	.word	0x08003a01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fae2 	bl	8003e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0208 	orr.w	r2, r2, #8
 80038d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0204 	bic.w	r2, r2, #4
 80038e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6999      	ldr	r1, [r3, #24]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	619a      	str	r2, [r3, #24]
      break;
 80038fa:	e0a5      	b.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fb34 	bl	8003f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6999      	ldr	r1, [r3, #24]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	021a      	lsls	r2, r3, #8
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	619a      	str	r2, [r3, #24]
      break;
 800393c:	e084      	b.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fb8b 	bl	8004060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0208 	orr.w	r2, r2, #8
 8003958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0204 	bic.w	r2, r2, #4
 8003968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69d9      	ldr	r1, [r3, #28]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	61da      	str	r2, [r3, #28]
      break;
 800397c:	e064      	b.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fbe1 	bl	800414c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69d9      	ldr	r1, [r3, #28]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	021a      	lsls	r2, r3, #8
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	61da      	str	r2, [r3, #28]
      break;
 80039be:	e043      	b.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fc18 	bl	80041fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0208 	orr.w	r2, r2, #8
 80039da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0204 	bic.w	r2, r2, #4
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039fe:	e023      	b.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fc4a 	bl	80042a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	021a      	lsls	r2, r3, #8
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a40:	e002      	b.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	75fb      	strb	r3, [r7, #23]
      break;
 8003a46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop

08003a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_TIM_ConfigClockSource+0x1c>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e0b4      	b.n	8003be2 <HAL_TIM_ConfigClockSource+0x186>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	4b56      	ldr	r3, [pc, #344]	; (8003bec <HAL_TIM_ConfigClockSource+0x190>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab0:	d03e      	beq.n	8003b30 <HAL_TIM_ConfigClockSource+0xd4>
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab6:	f200 8087 	bhi.w	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abe:	f000 8086 	beq.w	8003bce <HAL_TIM_ConfigClockSource+0x172>
 8003ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac6:	d87f      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b70      	cmp	r3, #112	; 0x70
 8003aca:	d01a      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0xa6>
 8003acc:	2b70      	cmp	r3, #112	; 0x70
 8003ace:	d87b      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b60      	cmp	r3, #96	; 0x60
 8003ad2:	d050      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x11a>
 8003ad4:	2b60      	cmp	r3, #96	; 0x60
 8003ad6:	d877      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b50      	cmp	r3, #80	; 0x50
 8003ada:	d03c      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0xfa>
 8003adc:	2b50      	cmp	r3, #80	; 0x50
 8003ade:	d873      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d058      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x13a>
 8003ae4:	2b40      	cmp	r3, #64	; 0x40
 8003ae6:	d86f      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b30      	cmp	r3, #48	; 0x30
 8003aea:	d064      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003aec:	2b30      	cmp	r3, #48	; 0x30
 8003aee:	d86b      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d060      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d867      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d05c      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d05a      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b00:	e062      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b12:	f000 fe51 	bl	80047b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	609a      	str	r2, [r3, #8]
      break;
 8003b2e:	e04f      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b40:	f000 fe3a 	bl	80047b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b52:	609a      	str	r2, [r3, #8]
      break;
 8003b54:	e03c      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b62:	461a      	mov	r2, r3
 8003b64:	f000 fcf8 	bl	8004558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2150      	movs	r1, #80	; 0x50
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fe07 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 8003b74:	e02c      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b82:	461a      	mov	r2, r3
 8003b84:	f000 fd54 	bl	8004630 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2160      	movs	r1, #96	; 0x60
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fdf7 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 8003b94:	e01c      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f000 fcd8 	bl	8004558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2140      	movs	r1, #64	; 0x40
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fde7 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 8003bb4:	e00c      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f000 fdde 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 8003bc6:	e003      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      break;
 8003bcc:	e000      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	fffeff88 	.word	0xfffeff88

08003bf0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e031      	b.n	8003c6c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003c18:	6839      	ldr	r1, [r7, #0]
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fb94 	bl	8004348 <TIM_SlaveTimer_SetConfig>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e018      	b.n	8003c6c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c48:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c58:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b0c      	cmp	r3, #12
 8003c86:	d831      	bhi.n	8003cec <HAL_TIM_ReadCapturedValue+0x78>
 8003c88:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003cc5 	.word	0x08003cc5
 8003c94:	08003ced 	.word	0x08003ced
 8003c98:	08003ced 	.word	0x08003ced
 8003c9c:	08003ced 	.word	0x08003ced
 8003ca0:	08003ccf 	.word	0x08003ccf
 8003ca4:	08003ced 	.word	0x08003ced
 8003ca8:	08003ced 	.word	0x08003ced
 8003cac:	08003ced 	.word	0x08003ced
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003ced 	.word	0x08003ced
 8003cb8:	08003ced 	.word	0x08003ced
 8003cbc:	08003ced 	.word	0x08003ced
 8003cc0:	08003ce3 	.word	0x08003ce3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	60fb      	str	r3, [r7, #12]

      break;
 8003ccc:	e00f      	b.n	8003cee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	60fb      	str	r3, [r7, #12]

      break;
 8003cd6:	e00a      	b.n	8003cee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cde:	60fb      	str	r3, [r7, #12]

      break;
 8003ce0:	e005      	b.n	8003cee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	60fb      	str	r3, [r7, #12]

      break;
 8003cea:	e000      	b.n	8003cee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003cec:	bf00      	nop
  }

  return tmpreg;
 8003cee:	68fb      	ldr	r3, [r7, #12]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a40      	ldr	r2, [pc, #256]	; (8003e60 <TIM_Base_SetConfig+0x114>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d013      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d00f      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a3d      	ldr	r2, [pc, #244]	; (8003e64 <TIM_Base_SetConfig+0x118>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00b      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a3c      	ldr	r2, [pc, #240]	; (8003e68 <TIM_Base_SetConfig+0x11c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d007      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3b      	ldr	r2, [pc, #236]	; (8003e6c <TIM_Base_SetConfig+0x120>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3a      	ldr	r2, [pc, #232]	; (8003e70 <TIM_Base_SetConfig+0x124>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <TIM_Base_SetConfig+0x114>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dac:	d027      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2c      	ldr	r2, [pc, #176]	; (8003e64 <TIM_Base_SetConfig+0x118>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d023      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2b      	ldr	r2, [pc, #172]	; (8003e68 <TIM_Base_SetConfig+0x11c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01f      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <TIM_Base_SetConfig+0x120>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a29      	ldr	r2, [pc, #164]	; (8003e70 <TIM_Base_SetConfig+0x124>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d017      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a28      	ldr	r2, [pc, #160]	; (8003e74 <TIM_Base_SetConfig+0x128>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a27      	ldr	r2, [pc, #156]	; (8003e78 <TIM_Base_SetConfig+0x12c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00f      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <TIM_Base_SetConfig+0x130>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a25      	ldr	r2, [pc, #148]	; (8003e80 <TIM_Base_SetConfig+0x134>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a24      	ldr	r2, [pc, #144]	; (8003e84 <TIM_Base_SetConfig+0x138>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <TIM_Base_SetConfig+0x13c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <TIM_Base_SetConfig+0x114>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d003      	beq.n	8003e44 <TIM_Base_SetConfig+0xf8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a0c      	ldr	r2, [pc, #48]	; (8003e70 <TIM_Base_SetConfig+0x124>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d103      	bne.n	8003e4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	615a      	str	r2, [r3, #20]
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40010000 	.word	0x40010000
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800
 8003e6c:	40000c00 	.word	0x40000c00
 8003e70:	40010400 	.word	0x40010400
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800
 8003e80:	40001800 	.word	0x40001800
 8003e84:	40001c00 	.word	0x40001c00
 8003e88:	40002000 	.word	0x40002000

08003e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f023 0201 	bic.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <TIM_OC1_SetConfig+0xd8>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f023 0302 	bic.w	r3, r3, #2
 8003ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a21      	ldr	r2, [pc, #132]	; (8003f68 <TIM_OC1_SetConfig+0xdc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_OC1_SetConfig+0x64>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a20      	ldr	r2, [pc, #128]	; (8003f6c <TIM_OC1_SetConfig+0xe0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d10c      	bne.n	8003f0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f023 0308 	bic.w	r3, r3, #8
 8003ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f023 0304 	bic.w	r3, r3, #4
 8003f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <TIM_OC1_SetConfig+0xdc>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_OC1_SetConfig+0x8e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <TIM_OC1_SetConfig+0xe0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d111      	bne.n	8003f3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	621a      	str	r2, [r3, #32]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	fffeff8f 	.word	0xfffeff8f
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40010400 	.word	0x40010400

08003f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f023 0210 	bic.w	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <TIM_OC2_SetConfig+0xe4>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0320 	bic.w	r3, r3, #32
 8003fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a23      	ldr	r2, [pc, #140]	; (8004058 <TIM_OC2_SetConfig+0xe8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_OC2_SetConfig+0x68>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a22      	ldr	r2, [pc, #136]	; (800405c <TIM_OC2_SetConfig+0xec>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d10d      	bne.n	8003ff4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a18      	ldr	r2, [pc, #96]	; (8004058 <TIM_OC2_SetConfig+0xe8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_OC2_SetConfig+0x94>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a17      	ldr	r2, [pc, #92]	; (800405c <TIM_OC2_SetConfig+0xec>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d113      	bne.n	800402c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800400a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	feff8fff 	.word	0xfeff8fff
 8004058:	40010000 	.word	0x40010000
 800405c:	40010400 	.word	0x40010400

08004060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <TIM_OC3_SetConfig+0xe0>)
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0303 	bic.w	r3, r3, #3
 8004096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a22      	ldr	r2, [pc, #136]	; (8004144 <TIM_OC3_SetConfig+0xe4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d003      	beq.n	80040c6 <TIM_OC3_SetConfig+0x66>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a21      	ldr	r2, [pc, #132]	; (8004148 <TIM_OC3_SetConfig+0xe8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d10d      	bne.n	80040e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a17      	ldr	r2, [pc, #92]	; (8004144 <TIM_OC3_SetConfig+0xe4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d003      	beq.n	80040f2 <TIM_OC3_SetConfig+0x92>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a16      	ldr	r2, [pc, #88]	; (8004148 <TIM_OC3_SetConfig+0xe8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d113      	bne.n	800411a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	621a      	str	r2, [r3, #32]
}
 8004134:	bf00      	nop
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	fffeff8f 	.word	0xfffeff8f
 8004144:	40010000 	.word	0x40010000
 8004148:	40010400 	.word	0x40010400

0800414c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <TIM_OC4_SetConfig+0xa4>)
 8004178:	4013      	ands	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	031b      	lsls	r3, r3, #12
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <TIM_OC4_SetConfig+0xa8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_OC4_SetConfig+0x68>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <TIM_OC4_SetConfig+0xac>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d109      	bne.n	80041c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	019b      	lsls	r3, r3, #6
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	feff8fff 	.word	0xfeff8fff
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40010400 	.word	0x40010400

080041fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <TIM_OC5_SetConfig+0x98>)
 8004228:	4013      	ands	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800423c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	041b      	lsls	r3, r3, #16
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a12      	ldr	r2, [pc, #72]	; (8004298 <TIM_OC5_SetConfig+0x9c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d003      	beq.n	800425a <TIM_OC5_SetConfig+0x5e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a11      	ldr	r2, [pc, #68]	; (800429c <TIM_OC5_SetConfig+0xa0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d109      	bne.n	800426e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004260:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	621a      	str	r2, [r3, #32]
}
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	fffeff8f 	.word	0xfffeff8f
 8004298:	40010000 	.word	0x40010000
 800429c:	40010400 	.word	0x40010400

080042a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4b1c      	ldr	r3, [pc, #112]	; (800433c <TIM_OC6_SetConfig+0x9c>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	051b      	lsls	r3, r3, #20
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a13      	ldr	r2, [pc, #76]	; (8004340 <TIM_OC6_SetConfig+0xa0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_OC6_SetConfig+0x60>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a12      	ldr	r2, [pc, #72]	; (8004344 <TIM_OC6_SetConfig+0xa4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d109      	bne.n	8004314 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004306:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	029b      	lsls	r3, r3, #10
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	feff8fff 	.word	0xfeff8fff
 8004340:	40010000 	.word	0x40010000
 8004344:	40010400 	.word	0x40010400

08004348 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004364:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4b3e      	ldr	r3, [pc, #248]	; (800446c <TIM_SlaveTimer_SetConfig+0x124>)
 8004374:	4013      	ands	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b70      	cmp	r3, #112	; 0x70
 8004390:	d01a      	beq.n	80043c8 <TIM_SlaveTimer_SetConfig+0x80>
 8004392:	2b70      	cmp	r3, #112	; 0x70
 8004394:	d860      	bhi.n	8004458 <TIM_SlaveTimer_SetConfig+0x110>
 8004396:	2b60      	cmp	r3, #96	; 0x60
 8004398:	d054      	beq.n	8004444 <TIM_SlaveTimer_SetConfig+0xfc>
 800439a:	2b60      	cmp	r3, #96	; 0x60
 800439c:	d85c      	bhi.n	8004458 <TIM_SlaveTimer_SetConfig+0x110>
 800439e:	2b50      	cmp	r3, #80	; 0x50
 80043a0:	d046      	beq.n	8004430 <TIM_SlaveTimer_SetConfig+0xe8>
 80043a2:	2b50      	cmp	r3, #80	; 0x50
 80043a4:	d858      	bhi.n	8004458 <TIM_SlaveTimer_SetConfig+0x110>
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	d019      	beq.n	80043de <TIM_SlaveTimer_SetConfig+0x96>
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d854      	bhi.n	8004458 <TIM_SlaveTimer_SetConfig+0x110>
 80043ae:	2b30      	cmp	r3, #48	; 0x30
 80043b0:	d055      	beq.n	800445e <TIM_SlaveTimer_SetConfig+0x116>
 80043b2:	2b30      	cmp	r3, #48	; 0x30
 80043b4:	d850      	bhi.n	8004458 <TIM_SlaveTimer_SetConfig+0x110>
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d051      	beq.n	800445e <TIM_SlaveTimer_SetConfig+0x116>
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d84c      	bhi.n	8004458 <TIM_SlaveTimer_SetConfig+0x110>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d04d      	beq.n	800445e <TIM_SlaveTimer_SetConfig+0x116>
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d04b      	beq.n	800445e <TIM_SlaveTimer_SetConfig+0x116>
 80043c6:	e047      	b.n	8004458 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80043d8:	f000 f9ee 	bl	80047b8 <TIM_ETR_SetConfig>
      break;
 80043dc:	e040      	b.n	8004460 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b05      	cmp	r3, #5
 80043e4:	d101      	bne.n	80043ea <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e03b      	b.n	8004462 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6a1a      	ldr	r2, [r3, #32]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0201 	bic.w	r2, r2, #1
 8004400:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004410:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	4313      	orrs	r3, r2
 800441c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
      break;
 800442e:	e017      	b.n	8004460 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800443c:	461a      	mov	r2, r3
 800443e:	f000 f88b 	bl	8004558 <TIM_TI1_ConfigInputStage>
      break;
 8004442:	e00d      	b.n	8004460 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004450:	461a      	mov	r2, r3
 8004452:	f000 f8ed 	bl	8004630 <TIM_TI2_ConfigInputStage>
      break;
 8004456:	e003      	b.n	8004460 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	75fb      	strb	r3, [r7, #23]
      break;
 800445c:	e000      	b.n	8004460 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800445e:	bf00      	nop
  }

  return status;
 8004460:	7dfb      	ldrb	r3, [r7, #23]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	fffefff8 	.word	0xfffefff8

08004470 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a28      	ldr	r2, [pc, #160]	; (800453c <TIM_TI1_SetConfig+0xcc>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01b      	beq.n	80044d6 <TIM_TI1_SetConfig+0x66>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a4:	d017      	beq.n	80044d6 <TIM_TI1_SetConfig+0x66>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4a25      	ldr	r2, [pc, #148]	; (8004540 <TIM_TI1_SetConfig+0xd0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <TIM_TI1_SetConfig+0x66>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4a24      	ldr	r2, [pc, #144]	; (8004544 <TIM_TI1_SetConfig+0xd4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00f      	beq.n	80044d6 <TIM_TI1_SetConfig+0x66>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a23      	ldr	r2, [pc, #140]	; (8004548 <TIM_TI1_SetConfig+0xd8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00b      	beq.n	80044d6 <TIM_TI1_SetConfig+0x66>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4a22      	ldr	r2, [pc, #136]	; (800454c <TIM_TI1_SetConfig+0xdc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <TIM_TI1_SetConfig+0x66>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a21      	ldr	r2, [pc, #132]	; (8004550 <TIM_TI1_SetConfig+0xe0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_TI1_SetConfig+0x66>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a20      	ldr	r2, [pc, #128]	; (8004554 <TIM_TI1_SetConfig+0xe4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <TIM_TI1_SetConfig+0x6a>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <TIM_TI1_SetConfig+0x6c>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f023 0303 	bic.w	r3, r3, #3
 80044e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e003      	b.n	80044fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	b2db      	uxtb	r3, r3
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f023 030a 	bic.w	r3, r3, #10
 8004514:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f003 030a 	and.w	r3, r3, #10
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40010000 	.word	0x40010000
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40010400 	.word	0x40010400
 8004550:	40014000 	.word	0x40014000
 8004554:	40001800 	.word	0x40001800

08004558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f023 0201 	bic.w	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f023 030a 	bic.w	r3, r3, #10
 8004594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b087      	sub	sp, #28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f023 0210 	bic.w	r2, r3, #16
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	031b      	lsls	r3, r3, #12
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004608:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	621a      	str	r2, [r3, #32]
}
 8004624:	bf00      	nop
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f023 0210 	bic.w	r2, r3, #16
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800465a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	031b      	lsls	r3, r3, #12
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800466c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	621a      	str	r2, [r3, #32]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f023 0303 	bic.w	r3, r3, #3
 80046bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80046e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004734:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004746:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	031b      	lsls	r3, r3, #12
 800474c:	b29b      	uxth	r3, r3
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800475a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	031b      	lsls	r3, r3, #12
 8004760:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004782:	b480      	push	{r7}
 8004784:	b085      	sub	sp, #20
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	f043 0307 	orr.w	r3, r3, #7
 80047a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	609a      	str	r2, [r3, #8]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	021a      	lsls	r2, r3, #8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	431a      	orrs	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4313      	orrs	r3, r2
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	609a      	str	r2, [r3, #8]
}
 80047ec:	bf00      	nop
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2201      	movs	r2, #1
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1a      	ldr	r2, [r3, #32]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	43db      	mvns	r3, r3
 800481a:	401a      	ands	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a1a      	ldr	r2, [r3, #32]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	fa01 f303 	lsl.w	r3, r1, r3
 8004830:	431a      	orrs	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004858:	2302      	movs	r3, #2
 800485a:	e06d      	b.n	8004938 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a30      	ldr	r2, [pc, #192]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2f      	ldr	r2, [pc, #188]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d108      	bne.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004896:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a20      	ldr	r2, [pc, #128]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d022      	beq.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d01d      	beq.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1d      	ldr	r2, [pc, #116]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d018      	beq.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1c      	ldr	r2, [pc, #112]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d013      	beq.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1a      	ldr	r2, [pc, #104]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00e      	beq.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a15      	ldr	r2, [pc, #84]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d009      	beq.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a16      	ldr	r2, [pc, #88]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a15      	ldr	r2, [pc, #84]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d10c      	bne.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004912:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	4313      	orrs	r3, r2
 800491c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	40010000 	.word	0x40010000
 8004948:	40010400 	.word	0x40010400
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40014000 	.word	0x40014000
 800495c:	40001800 	.word	0x40001800

08004960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e040      	b.n	8004a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fc fc8a 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2224      	movs	r2, #36	; 0x24
 80049c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f8b0 	bl	8004b40 <UART_SetConfig>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e022      	b.n	8004a30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fb08 	bl	8005008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fb8f 	bl	800514c <UART_CheckIdleState>
 8004a2e:	4603      	mov	r3, r0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d171      	bne.n	8004b34 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_UART_Transmit+0x24>
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e06a      	b.n	8004b36 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2221      	movs	r2, #33	; 0x21
 8004a6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a6e:	f7fc fe03 	bl	8001678 <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	88fa      	ldrh	r2, [r7, #6]
 8004a80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8c:	d108      	bne.n	8004aa0 <HAL_UART_Transmit+0x68>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d104      	bne.n	8004aa0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	e003      	b.n	8004aa8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004aa8:	e02c      	b.n	8004b04 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2180      	movs	r1, #128	; 0x80
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 fb80 	bl	80051ba <UART_WaitOnFlagUntilTimeout>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e038      	b.n	8004b36 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10b      	bne.n	8004ae2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	3302      	adds	r3, #2
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	e007      	b.n	8004af2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	781a      	ldrb	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	3301      	adds	r3, #1
 8004af0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1cc      	bne.n	8004aaa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2200      	movs	r2, #0
 8004b18:	2140      	movs	r1, #64	; 0x40
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fb4d 	bl	80051ba <UART_WaitOnFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e005      	b.n	8004b36 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e000      	b.n	8004b36 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4ba6      	ldr	r3, [pc, #664]	; (8004e04 <UART_SetConfig+0x2c4>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	6979      	ldr	r1, [r7, #20]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a94      	ldr	r2, [pc, #592]	; (8004e08 <UART_SetConfig+0x2c8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d120      	bne.n	8004bfe <UART_SetConfig+0xbe>
 8004bbc:	4b93      	ldr	r3, [pc, #588]	; (8004e0c <UART_SetConfig+0x2cc>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d816      	bhi.n	8004bf8 <UART_SetConfig+0xb8>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <UART_SetConfig+0x90>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004be1 	.word	0x08004be1
 8004bd4:	08004bed 	.word	0x08004bed
 8004bd8:	08004be7 	.word	0x08004be7
 8004bdc:	08004bf3 	.word	0x08004bf3
 8004be0:	2301      	movs	r3, #1
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e150      	b.n	8004e88 <UART_SetConfig+0x348>
 8004be6:	2302      	movs	r3, #2
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e14d      	b.n	8004e88 <UART_SetConfig+0x348>
 8004bec:	2304      	movs	r3, #4
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e14a      	b.n	8004e88 <UART_SetConfig+0x348>
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e147      	b.n	8004e88 <UART_SetConfig+0x348>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e144      	b.n	8004e88 <UART_SetConfig+0x348>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a83      	ldr	r2, [pc, #524]	; (8004e10 <UART_SetConfig+0x2d0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d132      	bne.n	8004c6e <UART_SetConfig+0x12e>
 8004c08:	4b80      	ldr	r3, [pc, #512]	; (8004e0c <UART_SetConfig+0x2cc>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b0c      	cmp	r3, #12
 8004c14:	d828      	bhi.n	8004c68 <UART_SetConfig+0x128>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <UART_SetConfig+0xdc>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c51 	.word	0x08004c51
 8004c20:	08004c69 	.word	0x08004c69
 8004c24:	08004c69 	.word	0x08004c69
 8004c28:	08004c69 	.word	0x08004c69
 8004c2c:	08004c5d 	.word	0x08004c5d
 8004c30:	08004c69 	.word	0x08004c69
 8004c34:	08004c69 	.word	0x08004c69
 8004c38:	08004c69 	.word	0x08004c69
 8004c3c:	08004c57 	.word	0x08004c57
 8004c40:	08004c69 	.word	0x08004c69
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c69 	.word	0x08004c69
 8004c4c:	08004c63 	.word	0x08004c63
 8004c50:	2300      	movs	r3, #0
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e118      	b.n	8004e88 <UART_SetConfig+0x348>
 8004c56:	2302      	movs	r3, #2
 8004c58:	77fb      	strb	r3, [r7, #31]
 8004c5a:	e115      	b.n	8004e88 <UART_SetConfig+0x348>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e112      	b.n	8004e88 <UART_SetConfig+0x348>
 8004c62:	2308      	movs	r3, #8
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e10f      	b.n	8004e88 <UART_SetConfig+0x348>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e10c      	b.n	8004e88 <UART_SetConfig+0x348>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a68      	ldr	r2, [pc, #416]	; (8004e14 <UART_SetConfig+0x2d4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d120      	bne.n	8004cba <UART_SetConfig+0x17a>
 8004c78:	4b64      	ldr	r3, [pc, #400]	; (8004e0c <UART_SetConfig+0x2cc>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c82:	2b30      	cmp	r3, #48	; 0x30
 8004c84:	d013      	beq.n	8004cae <UART_SetConfig+0x16e>
 8004c86:	2b30      	cmp	r3, #48	; 0x30
 8004c88:	d814      	bhi.n	8004cb4 <UART_SetConfig+0x174>
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d009      	beq.n	8004ca2 <UART_SetConfig+0x162>
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d810      	bhi.n	8004cb4 <UART_SetConfig+0x174>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <UART_SetConfig+0x15c>
 8004c96:	2b10      	cmp	r3, #16
 8004c98:	d006      	beq.n	8004ca8 <UART_SetConfig+0x168>
 8004c9a:	e00b      	b.n	8004cb4 <UART_SetConfig+0x174>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	e0f2      	b.n	8004e88 <UART_SetConfig+0x348>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	77fb      	strb	r3, [r7, #31]
 8004ca6:	e0ef      	b.n	8004e88 <UART_SetConfig+0x348>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	77fb      	strb	r3, [r7, #31]
 8004cac:	e0ec      	b.n	8004e88 <UART_SetConfig+0x348>
 8004cae:	2308      	movs	r3, #8
 8004cb0:	77fb      	strb	r3, [r7, #31]
 8004cb2:	e0e9      	b.n	8004e88 <UART_SetConfig+0x348>
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e0e6      	b.n	8004e88 <UART_SetConfig+0x348>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a56      	ldr	r2, [pc, #344]	; (8004e18 <UART_SetConfig+0x2d8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d120      	bne.n	8004d06 <UART_SetConfig+0x1c6>
 8004cc4:	4b51      	ldr	r3, [pc, #324]	; (8004e0c <UART_SetConfig+0x2cc>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cce:	2bc0      	cmp	r3, #192	; 0xc0
 8004cd0:	d013      	beq.n	8004cfa <UART_SetConfig+0x1ba>
 8004cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cd4:	d814      	bhi.n	8004d00 <UART_SetConfig+0x1c0>
 8004cd6:	2b80      	cmp	r3, #128	; 0x80
 8004cd8:	d009      	beq.n	8004cee <UART_SetConfig+0x1ae>
 8004cda:	2b80      	cmp	r3, #128	; 0x80
 8004cdc:	d810      	bhi.n	8004d00 <UART_SetConfig+0x1c0>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <UART_SetConfig+0x1a8>
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	d006      	beq.n	8004cf4 <UART_SetConfig+0x1b4>
 8004ce6:	e00b      	b.n	8004d00 <UART_SetConfig+0x1c0>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e0cc      	b.n	8004e88 <UART_SetConfig+0x348>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	77fb      	strb	r3, [r7, #31]
 8004cf2:	e0c9      	b.n	8004e88 <UART_SetConfig+0x348>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e0c6      	b.n	8004e88 <UART_SetConfig+0x348>
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e0c3      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d00:	2310      	movs	r3, #16
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e0c0      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a44      	ldr	r2, [pc, #272]	; (8004e1c <UART_SetConfig+0x2dc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d125      	bne.n	8004d5c <UART_SetConfig+0x21c>
 8004d10:	4b3e      	ldr	r3, [pc, #248]	; (8004e0c <UART_SetConfig+0x2cc>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d1e:	d017      	beq.n	8004d50 <UART_SetConfig+0x210>
 8004d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d24:	d817      	bhi.n	8004d56 <UART_SetConfig+0x216>
 8004d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d2a:	d00b      	beq.n	8004d44 <UART_SetConfig+0x204>
 8004d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d30:	d811      	bhi.n	8004d56 <UART_SetConfig+0x216>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <UART_SetConfig+0x1fe>
 8004d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3a:	d006      	beq.n	8004d4a <UART_SetConfig+0x20a>
 8004d3c:	e00b      	b.n	8004d56 <UART_SetConfig+0x216>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	77fb      	strb	r3, [r7, #31]
 8004d42:	e0a1      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d44:	2302      	movs	r3, #2
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e09e      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d4a:	2304      	movs	r3, #4
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e09b      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d50:	2308      	movs	r3, #8
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e098      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d56:	2310      	movs	r3, #16
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e095      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a2f      	ldr	r2, [pc, #188]	; (8004e20 <UART_SetConfig+0x2e0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d125      	bne.n	8004db2 <UART_SetConfig+0x272>
 8004d66:	4b29      	ldr	r3, [pc, #164]	; (8004e0c <UART_SetConfig+0x2cc>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d74:	d017      	beq.n	8004da6 <UART_SetConfig+0x266>
 8004d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d7a:	d817      	bhi.n	8004dac <UART_SetConfig+0x26c>
 8004d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d80:	d00b      	beq.n	8004d9a <UART_SetConfig+0x25a>
 8004d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d86:	d811      	bhi.n	8004dac <UART_SetConfig+0x26c>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <UART_SetConfig+0x254>
 8004d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d90:	d006      	beq.n	8004da0 <UART_SetConfig+0x260>
 8004d92:	e00b      	b.n	8004dac <UART_SetConfig+0x26c>
 8004d94:	2301      	movs	r3, #1
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e076      	b.n	8004e88 <UART_SetConfig+0x348>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e073      	b.n	8004e88 <UART_SetConfig+0x348>
 8004da0:	2304      	movs	r3, #4
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e070      	b.n	8004e88 <UART_SetConfig+0x348>
 8004da6:	2308      	movs	r3, #8
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e06d      	b.n	8004e88 <UART_SetConfig+0x348>
 8004dac:	2310      	movs	r3, #16
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e06a      	b.n	8004e88 <UART_SetConfig+0x348>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d138      	bne.n	8004e2e <UART_SetConfig+0x2ee>
 8004dbc:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <UART_SetConfig+0x2cc>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004dc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dca:	d017      	beq.n	8004dfc <UART_SetConfig+0x2bc>
 8004dcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dd0:	d82a      	bhi.n	8004e28 <UART_SetConfig+0x2e8>
 8004dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd6:	d00b      	beq.n	8004df0 <UART_SetConfig+0x2b0>
 8004dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ddc:	d824      	bhi.n	8004e28 <UART_SetConfig+0x2e8>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <UART_SetConfig+0x2aa>
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de6:	d006      	beq.n	8004df6 <UART_SetConfig+0x2b6>
 8004de8:	e01e      	b.n	8004e28 <UART_SetConfig+0x2e8>
 8004dea:	2300      	movs	r3, #0
 8004dec:	77fb      	strb	r3, [r7, #31]
 8004dee:	e04b      	b.n	8004e88 <UART_SetConfig+0x348>
 8004df0:	2302      	movs	r3, #2
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e048      	b.n	8004e88 <UART_SetConfig+0x348>
 8004df6:	2304      	movs	r3, #4
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e045      	b.n	8004e88 <UART_SetConfig+0x348>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e042      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e02:	bf00      	nop
 8004e04:	efff69f3 	.word	0xefff69f3
 8004e08:	40011000 	.word	0x40011000
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40004400 	.word	0x40004400
 8004e14:	40004800 	.word	0x40004800
 8004e18:	40004c00 	.word	0x40004c00
 8004e1c:	40005000 	.word	0x40005000
 8004e20:	40011400 	.word	0x40011400
 8004e24:	40007800 	.word	0x40007800
 8004e28:	2310      	movs	r3, #16
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e02c      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a72      	ldr	r2, [pc, #456]	; (8004ffc <UART_SetConfig+0x4bc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d125      	bne.n	8004e84 <UART_SetConfig+0x344>
 8004e38:	4b71      	ldr	r3, [pc, #452]	; (8005000 <UART_SetConfig+0x4c0>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e46:	d017      	beq.n	8004e78 <UART_SetConfig+0x338>
 8004e48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e4c:	d817      	bhi.n	8004e7e <UART_SetConfig+0x33e>
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e52:	d00b      	beq.n	8004e6c <UART_SetConfig+0x32c>
 8004e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e58:	d811      	bhi.n	8004e7e <UART_SetConfig+0x33e>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <UART_SetConfig+0x326>
 8004e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e62:	d006      	beq.n	8004e72 <UART_SetConfig+0x332>
 8004e64:	e00b      	b.n	8004e7e <UART_SetConfig+0x33e>
 8004e66:	2300      	movs	r3, #0
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e00d      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e00a      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e72:	2304      	movs	r3, #4
 8004e74:	77fb      	strb	r3, [r7, #31]
 8004e76:	e007      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e78:	2308      	movs	r3, #8
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e004      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e7e:	2310      	movs	r3, #16
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e001      	b.n	8004e88 <UART_SetConfig+0x348>
 8004e84:	2310      	movs	r3, #16
 8004e86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e90:	d15b      	bne.n	8004f4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e92:	7ffb      	ldrb	r3, [r7, #31]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d828      	bhi.n	8004eea <UART_SetConfig+0x3aa>
 8004e98:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <UART_SetConfig+0x360>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004ecd 	.word	0x08004ecd
 8004ea8:	08004ed5 	.word	0x08004ed5
 8004eac:	08004eeb 	.word	0x08004eeb
 8004eb0:	08004edb 	.word	0x08004edb
 8004eb4:	08004eeb 	.word	0x08004eeb
 8004eb8:	08004eeb 	.word	0x08004eeb
 8004ebc:	08004eeb 	.word	0x08004eeb
 8004ec0:	08004ee3 	.word	0x08004ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec4:	f7fd fcda 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8004ec8:	61b8      	str	r0, [r7, #24]
        break;
 8004eca:	e013      	b.n	8004ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ecc:	f7fd fcea 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 8004ed0:	61b8      	str	r0, [r7, #24]
        break;
 8004ed2:	e00f      	b.n	8004ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed4:	4b4b      	ldr	r3, [pc, #300]	; (8005004 <UART_SetConfig+0x4c4>)
 8004ed6:	61bb      	str	r3, [r7, #24]
        break;
 8004ed8:	e00c      	b.n	8004ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eda:	f7fd fbbd 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8004ede:	61b8      	str	r0, [r7, #24]
        break;
 8004ee0:	e008      	b.n	8004ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ee6:	61bb      	str	r3, [r7, #24]
        break;
 8004ee8:	e004      	b.n	8004ef4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8004ef2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d074      	beq.n	8004fe4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	005a      	lsls	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	441a      	add	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b0f      	cmp	r3, #15
 8004f14:	d916      	bls.n	8004f44 <UART_SetConfig+0x404>
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d212      	bcs.n	8004f44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	f023 030f 	bic.w	r3, r3, #15
 8004f26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	89fb      	ldrh	r3, [r7, #14]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	89fa      	ldrh	r2, [r7, #14]
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	e04f      	b.n	8004fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	77bb      	strb	r3, [r7, #30]
 8004f48:	e04c      	b.n	8004fe4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f4a:	7ffb      	ldrb	r3, [r7, #31]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d828      	bhi.n	8004fa2 <UART_SetConfig+0x462>
 8004f50:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <UART_SetConfig+0x418>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	08004f8d 	.word	0x08004f8d
 8004f64:	08004fa3 	.word	0x08004fa3
 8004f68:	08004f93 	.word	0x08004f93
 8004f6c:	08004fa3 	.word	0x08004fa3
 8004f70:	08004fa3 	.word	0x08004fa3
 8004f74:	08004fa3 	.word	0x08004fa3
 8004f78:	08004f9b 	.word	0x08004f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7fd fc7e 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8004f80:	61b8      	str	r0, [r7, #24]
        break;
 8004f82:	e013      	b.n	8004fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f84:	f7fd fc8e 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 8004f88:	61b8      	str	r0, [r7, #24]
        break;
 8004f8a:	e00f      	b.n	8004fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <UART_SetConfig+0x4c4>)
 8004f8e:	61bb      	str	r3, [r7, #24]
        break;
 8004f90:	e00c      	b.n	8004fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f92:	f7fd fb61 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8004f96:	61b8      	str	r0, [r7, #24]
        break;
 8004f98:	e008      	b.n	8004fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9e:	61bb      	str	r3, [r7, #24]
        break;
 8004fa0:	e004      	b.n	8004fac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8004faa:	bf00      	nop
    }

    if (pclk != 0U)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d018      	beq.n	8004fe4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	085a      	lsrs	r2, r3, #1
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	441a      	add	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b0f      	cmp	r3, #15
 8004fca:	d909      	bls.n	8004fe0 <UART_SetConfig+0x4a0>
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd2:	d205      	bcs.n	8004fe0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	60da      	str	r2, [r3, #12]
 8004fde:	e001      	b.n	8004fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ff0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40007c00 	.word	0x40007c00
 8005000:	40023800 	.word	0x40023800
 8005004:	00f42400 	.word	0x00f42400

08005008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01a      	beq.n	800511e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005106:	d10a      	bne.n	800511e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
  }
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af02      	add	r7, sp, #8
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800515c:	f7fc fa8c 	bl	8001678 <HAL_GetTick>
 8005160:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b08      	cmp	r3, #8
 800516e:	d10e      	bne.n	800518e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f81b 	bl	80051ba <UART_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e011      	b.n	80051b2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b09c      	sub	sp, #112	; 0x70
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	4613      	mov	r3, r2
 80051c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ca:	e0a7      	b.n	800531c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d2:	f000 80a3 	beq.w	800531c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fc fa4f 	bl	8001678 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <UART_WaitOnFlagUntilTimeout+0x32>
 80051e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d13f      	bne.n	800526c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005200:	667b      	str	r3, [r7, #100]	; 0x64
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800520a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800520c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005210:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e6      	bne.n	80051ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3308      	adds	r3, #8
 8005224:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	f023 0301 	bic.w	r3, r3, #1
 8005234:	663b      	str	r3, [r7, #96]	; 0x60
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3308      	adds	r3, #8
 800523c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800523e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005240:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800524c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e5      	bne.n	800521e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e068      	b.n	800533e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d050      	beq.n	800531c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005288:	d148      	bne.n	800531c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005292:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
 80052b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e6      	bne.n	8005294 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3308      	adds	r3, #8
 80052cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	613b      	str	r3, [r7, #16]
   return(result);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3308      	adds	r3, #8
 80052e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052e6:	623a      	str	r2, [r7, #32]
 80052e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	69f9      	ldr	r1, [r7, #28]
 80052ec:	6a3a      	ldr	r2, [r7, #32]
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e5      	bne.n	80052c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e010      	b.n	800533e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4013      	ands	r3, r2
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	429a      	cmp	r2, r3
 800532a:	bf0c      	ite	eq
 800532c:	2301      	moveq	r3, #1
 800532e:	2300      	movne	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	429a      	cmp	r2, r3
 8005338:	f43f af48 	beq.w	80051cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3770      	adds	r7, #112	; 0x70
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005348:	b084      	sub	sp, #16
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	f107 001c 	add.w	r0, r7, #28
 8005356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	2b01      	cmp	r3, #1
 800535e:	d120      	bne.n	80053a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <USB_CoreInit+0xac>)
 8005372:	4013      	ands	r3, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005386:	2b01      	cmp	r3, #1
 8005388:	d105      	bne.n	8005396 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa96 	bl	80058c8 <USB_CoreReset>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]
 80053a0:	e010      	b.n	80053c4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa8a 	bl	80058c8 <USB_CoreReset>
 80053b4:	4603      	mov	r3, r0
 80053b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d10b      	bne.n	80053e2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f043 0206 	orr.w	r2, r3, #6
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ee:	b004      	add	sp, #16
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	ffbdffbf 	.word	0xffbdffbf

080053f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f023 0201 	bic.w	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	460b      	mov	r3, r1
 8005424:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d115      	bne.n	8005468 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005448:	2001      	movs	r0, #1
 800544a:	f7fc f921 	bl	8001690 <HAL_Delay>
      ms++;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3301      	adds	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fa29 	bl	80058ac <USB_GetMode>
 800545a:	4603      	mov	r3, r0
 800545c:	2b01      	cmp	r3, #1
 800545e:	d01e      	beq.n	800549e <USB_SetCurrentMode+0x84>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b31      	cmp	r3, #49	; 0x31
 8005464:	d9f0      	bls.n	8005448 <USB_SetCurrentMode+0x2e>
 8005466:	e01a      	b.n	800549e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d115      	bne.n	800549a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800547a:	2001      	movs	r0, #1
 800547c:	f7fc f908 	bl	8001690 <HAL_Delay>
      ms++;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa10 	bl	80058ac <USB_GetMode>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <USB_SetCurrentMode+0x84>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b31      	cmp	r3, #49	; 0x31
 8005496:	d9f0      	bls.n	800547a <USB_SetCurrentMode+0x60>
 8005498:	e001      	b.n	800549e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e005      	b.n	80054aa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b32      	cmp	r3, #50	; 0x32
 80054a2:	d101      	bne.n	80054a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054b4:	b084      	sub	sp, #16
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b086      	sub	sp, #24
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	e009      	b.n	80054e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3340      	adds	r3, #64	; 0x40
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	3301      	adds	r3, #1
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b0e      	cmp	r3, #14
 80054ec:	d9f2      	bls.n	80054d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d11c      	bne.n	800552e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005502:	f043 0302 	orr.w	r3, r3, #2
 8005506:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e005      	b.n	800553a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005540:	461a      	mov	r2, r3
 8005542:	2300      	movs	r3, #0
 8005544:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	4619      	mov	r1, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005554:	461a      	mov	r2, r3
 8005556:	680b      	ldr	r3, [r1, #0]
 8005558:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10c      	bne.n	800557a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d104      	bne.n	8005570 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005566:	2100      	movs	r1, #0
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f965 	bl	8005838 <USB_SetDevSpeed>
 800556e:	e008      	b.n	8005582 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005570:	2101      	movs	r1, #1
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f960 	bl	8005838 <USB_SetDevSpeed>
 8005578:	e003      	b.n	8005582 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800557a:	2103      	movs	r1, #3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f95b 	bl	8005838 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005582:	2110      	movs	r1, #16
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f8f3 	bl	8005770 <USB_FlushTxFifo>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f91f 	bl	80057d8 <USB_FlushRxFifo>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	461a      	mov	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b6:	461a      	mov	r2, r3
 80055b8:	2300      	movs	r3, #0
 80055ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	461a      	mov	r2, r3
 80055c4:	2300      	movs	r3, #0
 80055c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	e043      	b.n	8005656 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e4:	d118      	bne.n	8005618 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	461a      	mov	r2, r3
 80055fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	e013      	b.n	800562a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	461a      	mov	r2, r3
 8005610:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e008      	b.n	800562a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	461a      	mov	r2, r3
 8005626:	2300      	movs	r3, #0
 8005628:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005636:	461a      	mov	r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	461a      	mov	r2, r3
 800564a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800564e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	3301      	adds	r3, #1
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	429a      	cmp	r2, r3
 800565c:	d3b7      	bcc.n	80055ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e043      	b.n	80056ec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567a:	d118      	bne.n	80056ae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	461a      	mov	r2, r3
 8005690:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	e013      	b.n	80056c0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	461a      	mov	r2, r3
 80056a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e008      	b.n	80056c0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	461a      	mov	r2, r3
 80056bc:	2300      	movs	r3, #0
 80056be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	461a      	mov	r2, r3
 80056ce:	2300      	movs	r3, #0
 80056d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056de:	461a      	mov	r2, r3
 80056e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3301      	adds	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d3b7      	bcc.n	8005664 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005706:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005714:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f043 0210 	orr.w	r2, r3, #16
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <USB_DevInit+0x2b4>)
 800572e:	4313      	orrs	r3, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f043 0208 	orr.w	r2, r3, #8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d105      	bne.n	8005758 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699a      	ldr	r2, [r3, #24]
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <USB_DevInit+0x2b8>)
 8005752:	4313      	orrs	r3, r2
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005758:	7dfb      	ldrb	r3, [r7, #23]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005764:	b004      	add	sp, #16
 8005766:	4770      	bx	lr
 8005768:	803c3800 	.word	0x803c3800
 800576c:	40000004 	.word	0x40000004

08005770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4a13      	ldr	r2, [pc, #76]	; (80057d4 <USB_FlushTxFifo+0x64>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e01b      	b.n	80057c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	daf2      	bge.n	800577e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	019b      	lsls	r3, r3, #6
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <USB_FlushTxFifo+0x64>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e006      	b.n	80057c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d0f0      	beq.n	80057a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	00030d40 	.word	0x00030d40

080057d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a11      	ldr	r2, [pc, #68]	; (8005834 <USB_FlushRxFifo+0x5c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e018      	b.n	8005828 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	daf2      	bge.n	80057e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2210      	movs	r2, #16
 8005806:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3301      	adds	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4a08      	ldr	r2, [pc, #32]	; (8005834 <USB_FlushRxFifo+0x5c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e006      	b.n	8005828 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2b10      	cmp	r3, #16
 8005824:	d0f0      	beq.n	8005808 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	00030d40 	.word	0x00030d40

08005838 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	68f9      	ldr	r1, [r7, #12]
 8005854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005858:	4313      	orrs	r3, r2
 800585a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800586a:	b480      	push	{r7}
 800586c:	b085      	sub	sp, #20
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005884:	f023 0303 	bic.w	r3, r3, #3
 8005888:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005898:	f043 0302 	orr.w	r3, r3, #2
 800589c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f003 0301 	and.w	r3, r3, #1
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4a13      	ldr	r2, [pc, #76]	; (800592c <USB_CoreReset+0x64>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e01b      	b.n	800591e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	daf2      	bge.n	80058d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f043 0201 	orr.w	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3301      	adds	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <USB_CoreReset+0x64>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e006      	b.n	800591e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b01      	cmp	r3, #1
 800591a:	d0f0      	beq.n	80058fe <USB_CoreReset+0x36>

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	00030d40 	.word	0x00030d40

08005930 <siprintf>:
 8005930:	b40e      	push	{r1, r2, r3}
 8005932:	b500      	push	{lr}
 8005934:	b09c      	sub	sp, #112	; 0x70
 8005936:	ab1d      	add	r3, sp, #116	; 0x74
 8005938:	9002      	str	r0, [sp, #8]
 800593a:	9006      	str	r0, [sp, #24]
 800593c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005940:	4809      	ldr	r0, [pc, #36]	; (8005968 <siprintf+0x38>)
 8005942:	9107      	str	r1, [sp, #28]
 8005944:	9104      	str	r1, [sp, #16]
 8005946:	4909      	ldr	r1, [pc, #36]	; (800596c <siprintf+0x3c>)
 8005948:	f853 2b04 	ldr.w	r2, [r3], #4
 800594c:	9105      	str	r1, [sp, #20]
 800594e:	6800      	ldr	r0, [r0, #0]
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	a902      	add	r1, sp, #8
 8005954:	f000 f992 	bl	8005c7c <_svfiprintf_r>
 8005958:	9b02      	ldr	r3, [sp, #8]
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	b01c      	add	sp, #112	; 0x70
 8005960:	f85d eb04 	ldr.w	lr, [sp], #4
 8005964:	b003      	add	sp, #12
 8005966:	4770      	bx	lr
 8005968:	200000e4 	.word	0x200000e4
 800596c:	ffff0208 	.word	0xffff0208

08005970 <memset>:
 8005970:	4402      	add	r2, r0
 8005972:	4603      	mov	r3, r0
 8005974:	4293      	cmp	r3, r2
 8005976:	d100      	bne.n	800597a <memset+0xa>
 8005978:	4770      	bx	lr
 800597a:	f803 1b01 	strb.w	r1, [r3], #1
 800597e:	e7f9      	b.n	8005974 <memset+0x4>

08005980 <__errno>:
 8005980:	4b01      	ldr	r3, [pc, #4]	; (8005988 <__errno+0x8>)
 8005982:	6818      	ldr	r0, [r3, #0]
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	200000e4 	.word	0x200000e4

0800598c <__libc_init_array>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	4d0d      	ldr	r5, [pc, #52]	; (80059c4 <__libc_init_array+0x38>)
 8005990:	4c0d      	ldr	r4, [pc, #52]	; (80059c8 <__libc_init_array+0x3c>)
 8005992:	1b64      	subs	r4, r4, r5
 8005994:	10a4      	asrs	r4, r4, #2
 8005996:	2600      	movs	r6, #0
 8005998:	42a6      	cmp	r6, r4
 800599a:	d109      	bne.n	80059b0 <__libc_init_array+0x24>
 800599c:	4d0b      	ldr	r5, [pc, #44]	; (80059cc <__libc_init_array+0x40>)
 800599e:	4c0c      	ldr	r4, [pc, #48]	; (80059d0 <__libc_init_array+0x44>)
 80059a0:	f000 fc6a 	bl	8006278 <_init>
 80059a4:	1b64      	subs	r4, r4, r5
 80059a6:	10a4      	asrs	r4, r4, #2
 80059a8:	2600      	movs	r6, #0
 80059aa:	42a6      	cmp	r6, r4
 80059ac:	d105      	bne.n	80059ba <__libc_init_array+0x2e>
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b4:	4798      	blx	r3
 80059b6:	3601      	adds	r6, #1
 80059b8:	e7ee      	b.n	8005998 <__libc_init_array+0xc>
 80059ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80059be:	4798      	blx	r3
 80059c0:	3601      	adds	r6, #1
 80059c2:	e7f2      	b.n	80059aa <__libc_init_array+0x1e>
 80059c4:	080062f4 	.word	0x080062f4
 80059c8:	080062f4 	.word	0x080062f4
 80059cc:	080062f4 	.word	0x080062f4
 80059d0:	080062f8 	.word	0x080062f8

080059d4 <__retarget_lock_acquire_recursive>:
 80059d4:	4770      	bx	lr

080059d6 <__retarget_lock_release_recursive>:
 80059d6:	4770      	bx	lr

080059d8 <_free_r>:
 80059d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059da:	2900      	cmp	r1, #0
 80059dc:	d044      	beq.n	8005a68 <_free_r+0x90>
 80059de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e2:	9001      	str	r0, [sp, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f1a1 0404 	sub.w	r4, r1, #4
 80059ea:	bfb8      	it	lt
 80059ec:	18e4      	addlt	r4, r4, r3
 80059ee:	f000 f8df 	bl	8005bb0 <__malloc_lock>
 80059f2:	4a1e      	ldr	r2, [pc, #120]	; (8005a6c <_free_r+0x94>)
 80059f4:	9801      	ldr	r0, [sp, #4]
 80059f6:	6813      	ldr	r3, [r2, #0]
 80059f8:	b933      	cbnz	r3, 8005a08 <_free_r+0x30>
 80059fa:	6063      	str	r3, [r4, #4]
 80059fc:	6014      	str	r4, [r2, #0]
 80059fe:	b003      	add	sp, #12
 8005a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a04:	f000 b8da 	b.w	8005bbc <__malloc_unlock>
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d908      	bls.n	8005a1e <_free_r+0x46>
 8005a0c:	6825      	ldr	r5, [r4, #0]
 8005a0e:	1961      	adds	r1, r4, r5
 8005a10:	428b      	cmp	r3, r1
 8005a12:	bf01      	itttt	eq
 8005a14:	6819      	ldreq	r1, [r3, #0]
 8005a16:	685b      	ldreq	r3, [r3, #4]
 8005a18:	1949      	addeq	r1, r1, r5
 8005a1a:	6021      	streq	r1, [r4, #0]
 8005a1c:	e7ed      	b.n	80059fa <_free_r+0x22>
 8005a1e:	461a      	mov	r2, r3
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	b10b      	cbz	r3, 8005a28 <_free_r+0x50>
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	d9fa      	bls.n	8005a1e <_free_r+0x46>
 8005a28:	6811      	ldr	r1, [r2, #0]
 8005a2a:	1855      	adds	r5, r2, r1
 8005a2c:	42a5      	cmp	r5, r4
 8005a2e:	d10b      	bne.n	8005a48 <_free_r+0x70>
 8005a30:	6824      	ldr	r4, [r4, #0]
 8005a32:	4421      	add	r1, r4
 8005a34:	1854      	adds	r4, r2, r1
 8005a36:	42a3      	cmp	r3, r4
 8005a38:	6011      	str	r1, [r2, #0]
 8005a3a:	d1e0      	bne.n	80059fe <_free_r+0x26>
 8005a3c:	681c      	ldr	r4, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	6053      	str	r3, [r2, #4]
 8005a42:	440c      	add	r4, r1
 8005a44:	6014      	str	r4, [r2, #0]
 8005a46:	e7da      	b.n	80059fe <_free_r+0x26>
 8005a48:	d902      	bls.n	8005a50 <_free_r+0x78>
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	6003      	str	r3, [r0, #0]
 8005a4e:	e7d6      	b.n	80059fe <_free_r+0x26>
 8005a50:	6825      	ldr	r5, [r4, #0]
 8005a52:	1961      	adds	r1, r4, r5
 8005a54:	428b      	cmp	r3, r1
 8005a56:	bf04      	itt	eq
 8005a58:	6819      	ldreq	r1, [r3, #0]
 8005a5a:	685b      	ldreq	r3, [r3, #4]
 8005a5c:	6063      	str	r3, [r4, #4]
 8005a5e:	bf04      	itt	eq
 8005a60:	1949      	addeq	r1, r1, r5
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	6054      	str	r4, [r2, #4]
 8005a66:	e7ca      	b.n	80059fe <_free_r+0x26>
 8005a68:	b003      	add	sp, #12
 8005a6a:	bd30      	pop	{r4, r5, pc}
 8005a6c:	200009cc 	.word	0x200009cc

08005a70 <sbrk_aligned>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	4e0e      	ldr	r6, [pc, #56]	; (8005aac <sbrk_aligned+0x3c>)
 8005a74:	460c      	mov	r4, r1
 8005a76:	6831      	ldr	r1, [r6, #0]
 8005a78:	4605      	mov	r5, r0
 8005a7a:	b911      	cbnz	r1, 8005a82 <sbrk_aligned+0x12>
 8005a7c:	f000 fba6 	bl	80061cc <_sbrk_r>
 8005a80:	6030      	str	r0, [r6, #0]
 8005a82:	4621      	mov	r1, r4
 8005a84:	4628      	mov	r0, r5
 8005a86:	f000 fba1 	bl	80061cc <_sbrk_r>
 8005a8a:	1c43      	adds	r3, r0, #1
 8005a8c:	d00a      	beq.n	8005aa4 <sbrk_aligned+0x34>
 8005a8e:	1cc4      	adds	r4, r0, #3
 8005a90:	f024 0403 	bic.w	r4, r4, #3
 8005a94:	42a0      	cmp	r0, r4
 8005a96:	d007      	beq.n	8005aa8 <sbrk_aligned+0x38>
 8005a98:	1a21      	subs	r1, r4, r0
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 fb96 	bl	80061cc <_sbrk_r>
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d101      	bne.n	8005aa8 <sbrk_aligned+0x38>
 8005aa4:	f04f 34ff 	mov.w	r4, #4294967295
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	bd70      	pop	{r4, r5, r6, pc}
 8005aac:	200009d0 	.word	0x200009d0

08005ab0 <_malloc_r>:
 8005ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab4:	1ccd      	adds	r5, r1, #3
 8005ab6:	f025 0503 	bic.w	r5, r5, #3
 8005aba:	3508      	adds	r5, #8
 8005abc:	2d0c      	cmp	r5, #12
 8005abe:	bf38      	it	cc
 8005ac0:	250c      	movcc	r5, #12
 8005ac2:	2d00      	cmp	r5, #0
 8005ac4:	4607      	mov	r7, r0
 8005ac6:	db01      	blt.n	8005acc <_malloc_r+0x1c>
 8005ac8:	42a9      	cmp	r1, r5
 8005aca:	d905      	bls.n	8005ad8 <_malloc_r+0x28>
 8005acc:	230c      	movs	r3, #12
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	2600      	movs	r6, #0
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bac <_malloc_r+0xfc>
 8005adc:	f000 f868 	bl	8005bb0 <__malloc_lock>
 8005ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ae4:	461c      	mov	r4, r3
 8005ae6:	bb5c      	cbnz	r4, 8005b40 <_malloc_r+0x90>
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4638      	mov	r0, r7
 8005aec:	f7ff ffc0 	bl	8005a70 <sbrk_aligned>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	4604      	mov	r4, r0
 8005af4:	d155      	bne.n	8005ba2 <_malloc_r+0xf2>
 8005af6:	f8d8 4000 	ldr.w	r4, [r8]
 8005afa:	4626      	mov	r6, r4
 8005afc:	2e00      	cmp	r6, #0
 8005afe:	d145      	bne.n	8005b8c <_malloc_r+0xdc>
 8005b00:	2c00      	cmp	r4, #0
 8005b02:	d048      	beq.n	8005b96 <_malloc_r+0xe6>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	4631      	mov	r1, r6
 8005b08:	4638      	mov	r0, r7
 8005b0a:	eb04 0903 	add.w	r9, r4, r3
 8005b0e:	f000 fb5d 	bl	80061cc <_sbrk_r>
 8005b12:	4581      	cmp	r9, r0
 8005b14:	d13f      	bne.n	8005b96 <_malloc_r+0xe6>
 8005b16:	6821      	ldr	r1, [r4, #0]
 8005b18:	1a6d      	subs	r5, r5, r1
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	4638      	mov	r0, r7
 8005b1e:	f7ff ffa7 	bl	8005a70 <sbrk_aligned>
 8005b22:	3001      	adds	r0, #1
 8005b24:	d037      	beq.n	8005b96 <_malloc_r+0xe6>
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	442b      	add	r3, r5
 8005b2a:	6023      	str	r3, [r4, #0]
 8005b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d038      	beq.n	8005ba6 <_malloc_r+0xf6>
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	42a2      	cmp	r2, r4
 8005b38:	d12b      	bne.n	8005b92 <_malloc_r+0xe2>
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	e00f      	b.n	8005b60 <_malloc_r+0xb0>
 8005b40:	6822      	ldr	r2, [r4, #0]
 8005b42:	1b52      	subs	r2, r2, r5
 8005b44:	d41f      	bmi.n	8005b86 <_malloc_r+0xd6>
 8005b46:	2a0b      	cmp	r2, #11
 8005b48:	d917      	bls.n	8005b7a <_malloc_r+0xca>
 8005b4a:	1961      	adds	r1, r4, r5
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	6025      	str	r5, [r4, #0]
 8005b50:	bf18      	it	ne
 8005b52:	6059      	strne	r1, [r3, #4]
 8005b54:	6863      	ldr	r3, [r4, #4]
 8005b56:	bf08      	it	eq
 8005b58:	f8c8 1000 	streq.w	r1, [r8]
 8005b5c:	5162      	str	r2, [r4, r5]
 8005b5e:	604b      	str	r3, [r1, #4]
 8005b60:	4638      	mov	r0, r7
 8005b62:	f104 060b 	add.w	r6, r4, #11
 8005b66:	f000 f829 	bl	8005bbc <__malloc_unlock>
 8005b6a:	f026 0607 	bic.w	r6, r6, #7
 8005b6e:	1d23      	adds	r3, r4, #4
 8005b70:	1af2      	subs	r2, r6, r3
 8005b72:	d0ae      	beq.n	8005ad2 <_malloc_r+0x22>
 8005b74:	1b9b      	subs	r3, r3, r6
 8005b76:	50a3      	str	r3, [r4, r2]
 8005b78:	e7ab      	b.n	8005ad2 <_malloc_r+0x22>
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	6862      	ldr	r2, [r4, #4]
 8005b7e:	d1dd      	bne.n	8005b3c <_malloc_r+0x8c>
 8005b80:	f8c8 2000 	str.w	r2, [r8]
 8005b84:	e7ec      	b.n	8005b60 <_malloc_r+0xb0>
 8005b86:	4623      	mov	r3, r4
 8005b88:	6864      	ldr	r4, [r4, #4]
 8005b8a:	e7ac      	b.n	8005ae6 <_malloc_r+0x36>
 8005b8c:	4634      	mov	r4, r6
 8005b8e:	6876      	ldr	r6, [r6, #4]
 8005b90:	e7b4      	b.n	8005afc <_malloc_r+0x4c>
 8005b92:	4613      	mov	r3, r2
 8005b94:	e7cc      	b.n	8005b30 <_malloc_r+0x80>
 8005b96:	230c      	movs	r3, #12
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	f000 f80e 	bl	8005bbc <__malloc_unlock>
 8005ba0:	e797      	b.n	8005ad2 <_malloc_r+0x22>
 8005ba2:	6025      	str	r5, [r4, #0]
 8005ba4:	e7dc      	b.n	8005b60 <_malloc_r+0xb0>
 8005ba6:	605b      	str	r3, [r3, #4]
 8005ba8:	deff      	udf	#255	; 0xff
 8005baa:	bf00      	nop
 8005bac:	200009cc 	.word	0x200009cc

08005bb0 <__malloc_lock>:
 8005bb0:	4801      	ldr	r0, [pc, #4]	; (8005bb8 <__malloc_lock+0x8>)
 8005bb2:	f7ff bf0f 	b.w	80059d4 <__retarget_lock_acquire_recursive>
 8005bb6:	bf00      	nop
 8005bb8:	200009c8 	.word	0x200009c8

08005bbc <__malloc_unlock>:
 8005bbc:	4801      	ldr	r0, [pc, #4]	; (8005bc4 <__malloc_unlock+0x8>)
 8005bbe:	f7ff bf0a 	b.w	80059d6 <__retarget_lock_release_recursive>
 8005bc2:	bf00      	nop
 8005bc4:	200009c8 	.word	0x200009c8

08005bc8 <__ssputs_r>:
 8005bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	688e      	ldr	r6, [r1, #8]
 8005bce:	461f      	mov	r7, r3
 8005bd0:	42be      	cmp	r6, r7
 8005bd2:	680b      	ldr	r3, [r1, #0]
 8005bd4:	4682      	mov	sl, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	4690      	mov	r8, r2
 8005bda:	d82c      	bhi.n	8005c36 <__ssputs_r+0x6e>
 8005bdc:	898a      	ldrh	r2, [r1, #12]
 8005bde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005be2:	d026      	beq.n	8005c32 <__ssputs_r+0x6a>
 8005be4:	6965      	ldr	r5, [r4, #20]
 8005be6:	6909      	ldr	r1, [r1, #16]
 8005be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bec:	eba3 0901 	sub.w	r9, r3, r1
 8005bf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bf4:	1c7b      	adds	r3, r7, #1
 8005bf6:	444b      	add	r3, r9
 8005bf8:	106d      	asrs	r5, r5, #1
 8005bfa:	429d      	cmp	r5, r3
 8005bfc:	bf38      	it	cc
 8005bfe:	461d      	movcc	r5, r3
 8005c00:	0553      	lsls	r3, r2, #21
 8005c02:	d527      	bpl.n	8005c54 <__ssputs_r+0x8c>
 8005c04:	4629      	mov	r1, r5
 8005c06:	f7ff ff53 	bl	8005ab0 <_malloc_r>
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	b360      	cbz	r0, 8005c68 <__ssputs_r+0xa0>
 8005c0e:	6921      	ldr	r1, [r4, #16]
 8005c10:	464a      	mov	r2, r9
 8005c12:	f000 faeb 	bl	80061ec <memcpy>
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c20:	81a3      	strh	r3, [r4, #12]
 8005c22:	6126      	str	r6, [r4, #16]
 8005c24:	6165      	str	r5, [r4, #20]
 8005c26:	444e      	add	r6, r9
 8005c28:	eba5 0509 	sub.w	r5, r5, r9
 8005c2c:	6026      	str	r6, [r4, #0]
 8005c2e:	60a5      	str	r5, [r4, #8]
 8005c30:	463e      	mov	r6, r7
 8005c32:	42be      	cmp	r6, r7
 8005c34:	d900      	bls.n	8005c38 <__ssputs_r+0x70>
 8005c36:	463e      	mov	r6, r7
 8005c38:	6820      	ldr	r0, [r4, #0]
 8005c3a:	4632      	mov	r2, r6
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	f000 faab 	bl	8006198 <memmove>
 8005c42:	68a3      	ldr	r3, [r4, #8]
 8005c44:	1b9b      	subs	r3, r3, r6
 8005c46:	60a3      	str	r3, [r4, #8]
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	4433      	add	r3, r6
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	2000      	movs	r0, #0
 8005c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c54:	462a      	mov	r2, r5
 8005c56:	f000 fad7 	bl	8006208 <_realloc_r>
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d1e0      	bne.n	8005c22 <__ssputs_r+0x5a>
 8005c60:	6921      	ldr	r1, [r4, #16]
 8005c62:	4650      	mov	r0, sl
 8005c64:	f7ff feb8 	bl	80059d8 <_free_r>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	f8ca 3000 	str.w	r3, [sl]
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7a:	e7e9      	b.n	8005c50 <__ssputs_r+0x88>

08005c7c <_svfiprintf_r>:
 8005c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	4698      	mov	r8, r3
 8005c82:	898b      	ldrh	r3, [r1, #12]
 8005c84:	061b      	lsls	r3, r3, #24
 8005c86:	b09d      	sub	sp, #116	; 0x74
 8005c88:	4607      	mov	r7, r0
 8005c8a:	460d      	mov	r5, r1
 8005c8c:	4614      	mov	r4, r2
 8005c8e:	d50e      	bpl.n	8005cae <_svfiprintf_r+0x32>
 8005c90:	690b      	ldr	r3, [r1, #16]
 8005c92:	b963      	cbnz	r3, 8005cae <_svfiprintf_r+0x32>
 8005c94:	2140      	movs	r1, #64	; 0x40
 8005c96:	f7ff ff0b 	bl	8005ab0 <_malloc_r>
 8005c9a:	6028      	str	r0, [r5, #0]
 8005c9c:	6128      	str	r0, [r5, #16]
 8005c9e:	b920      	cbnz	r0, 8005caa <_svfiprintf_r+0x2e>
 8005ca0:	230c      	movs	r3, #12
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca8:	e0d0      	b.n	8005e4c <_svfiprintf_r+0x1d0>
 8005caa:	2340      	movs	r3, #64	; 0x40
 8005cac:	616b      	str	r3, [r5, #20]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb2:	2320      	movs	r3, #32
 8005cb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cbc:	2330      	movs	r3, #48	; 0x30
 8005cbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005e64 <_svfiprintf_r+0x1e8>
 8005cc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cc6:	f04f 0901 	mov.w	r9, #1
 8005cca:	4623      	mov	r3, r4
 8005ccc:	469a      	mov	sl, r3
 8005cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cd2:	b10a      	cbz	r2, 8005cd8 <_svfiprintf_r+0x5c>
 8005cd4:	2a25      	cmp	r2, #37	; 0x25
 8005cd6:	d1f9      	bne.n	8005ccc <_svfiprintf_r+0x50>
 8005cd8:	ebba 0b04 	subs.w	fp, sl, r4
 8005cdc:	d00b      	beq.n	8005cf6 <_svfiprintf_r+0x7a>
 8005cde:	465b      	mov	r3, fp
 8005ce0:	4622      	mov	r2, r4
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f7ff ff6f 	bl	8005bc8 <__ssputs_r>
 8005cea:	3001      	adds	r0, #1
 8005cec:	f000 80a9 	beq.w	8005e42 <_svfiprintf_r+0x1c6>
 8005cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf2:	445a      	add	r2, fp
 8005cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8005cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 80a1 	beq.w	8005e42 <_svfiprintf_r+0x1c6>
 8005d00:	2300      	movs	r3, #0
 8005d02:	f04f 32ff 	mov.w	r2, #4294967295
 8005d06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d0a:	f10a 0a01 	add.w	sl, sl, #1
 8005d0e:	9304      	str	r3, [sp, #16]
 8005d10:	9307      	str	r3, [sp, #28]
 8005d12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d16:	931a      	str	r3, [sp, #104]	; 0x68
 8005d18:	4654      	mov	r4, sl
 8005d1a:	2205      	movs	r2, #5
 8005d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d20:	4850      	ldr	r0, [pc, #320]	; (8005e64 <_svfiprintf_r+0x1e8>)
 8005d22:	f7fa fa75 	bl	8000210 <memchr>
 8005d26:	9a04      	ldr	r2, [sp, #16]
 8005d28:	b9d8      	cbnz	r0, 8005d62 <_svfiprintf_r+0xe6>
 8005d2a:	06d0      	lsls	r0, r2, #27
 8005d2c:	bf44      	itt	mi
 8005d2e:	2320      	movmi	r3, #32
 8005d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d34:	0711      	lsls	r1, r2, #28
 8005d36:	bf44      	itt	mi
 8005d38:	232b      	movmi	r3, #43	; 0x2b
 8005d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d42:	2b2a      	cmp	r3, #42	; 0x2a
 8005d44:	d015      	beq.n	8005d72 <_svfiprintf_r+0xf6>
 8005d46:	9a07      	ldr	r2, [sp, #28]
 8005d48:	4654      	mov	r4, sl
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f04f 0c0a 	mov.w	ip, #10
 8005d50:	4621      	mov	r1, r4
 8005d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d56:	3b30      	subs	r3, #48	; 0x30
 8005d58:	2b09      	cmp	r3, #9
 8005d5a:	d94d      	bls.n	8005df8 <_svfiprintf_r+0x17c>
 8005d5c:	b1b0      	cbz	r0, 8005d8c <_svfiprintf_r+0x110>
 8005d5e:	9207      	str	r2, [sp, #28]
 8005d60:	e014      	b.n	8005d8c <_svfiprintf_r+0x110>
 8005d62:	eba0 0308 	sub.w	r3, r0, r8
 8005d66:	fa09 f303 	lsl.w	r3, r9, r3
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	9304      	str	r3, [sp, #16]
 8005d6e:	46a2      	mov	sl, r4
 8005d70:	e7d2      	b.n	8005d18 <_svfiprintf_r+0x9c>
 8005d72:	9b03      	ldr	r3, [sp, #12]
 8005d74:	1d19      	adds	r1, r3, #4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	9103      	str	r1, [sp, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	bfbb      	ittet	lt
 8005d7e:	425b      	neglt	r3, r3
 8005d80:	f042 0202 	orrlt.w	r2, r2, #2
 8005d84:	9307      	strge	r3, [sp, #28]
 8005d86:	9307      	strlt	r3, [sp, #28]
 8005d88:	bfb8      	it	lt
 8005d8a:	9204      	strlt	r2, [sp, #16]
 8005d8c:	7823      	ldrb	r3, [r4, #0]
 8005d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005d90:	d10c      	bne.n	8005dac <_svfiprintf_r+0x130>
 8005d92:	7863      	ldrb	r3, [r4, #1]
 8005d94:	2b2a      	cmp	r3, #42	; 0x2a
 8005d96:	d134      	bne.n	8005e02 <_svfiprintf_r+0x186>
 8005d98:	9b03      	ldr	r3, [sp, #12]
 8005d9a:	1d1a      	adds	r2, r3, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	9203      	str	r2, [sp, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bfb8      	it	lt
 8005da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005da8:	3402      	adds	r4, #2
 8005daa:	9305      	str	r3, [sp, #20]
 8005dac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005e74 <_svfiprintf_r+0x1f8>
 8005db0:	7821      	ldrb	r1, [r4, #0]
 8005db2:	2203      	movs	r2, #3
 8005db4:	4650      	mov	r0, sl
 8005db6:	f7fa fa2b 	bl	8000210 <memchr>
 8005dba:	b138      	cbz	r0, 8005dcc <_svfiprintf_r+0x150>
 8005dbc:	9b04      	ldr	r3, [sp, #16]
 8005dbe:	eba0 000a 	sub.w	r0, r0, sl
 8005dc2:	2240      	movs	r2, #64	; 0x40
 8005dc4:	4082      	lsls	r2, r0
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	3401      	adds	r4, #1
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd0:	4825      	ldr	r0, [pc, #148]	; (8005e68 <_svfiprintf_r+0x1ec>)
 8005dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dd6:	2206      	movs	r2, #6
 8005dd8:	f7fa fa1a 	bl	8000210 <memchr>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d038      	beq.n	8005e52 <_svfiprintf_r+0x1d6>
 8005de0:	4b22      	ldr	r3, [pc, #136]	; (8005e6c <_svfiprintf_r+0x1f0>)
 8005de2:	bb1b      	cbnz	r3, 8005e2c <_svfiprintf_r+0x1b0>
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	3307      	adds	r3, #7
 8005de8:	f023 0307 	bic.w	r3, r3, #7
 8005dec:	3308      	adds	r3, #8
 8005dee:	9303      	str	r3, [sp, #12]
 8005df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df2:	4433      	add	r3, r6
 8005df4:	9309      	str	r3, [sp, #36]	; 0x24
 8005df6:	e768      	b.n	8005cca <_svfiprintf_r+0x4e>
 8005df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	2001      	movs	r0, #1
 8005e00:	e7a6      	b.n	8005d50 <_svfiprintf_r+0xd4>
 8005e02:	2300      	movs	r3, #0
 8005e04:	3401      	adds	r4, #1
 8005e06:	9305      	str	r3, [sp, #20]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f04f 0c0a 	mov.w	ip, #10
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e14:	3a30      	subs	r2, #48	; 0x30
 8005e16:	2a09      	cmp	r2, #9
 8005e18:	d903      	bls.n	8005e22 <_svfiprintf_r+0x1a6>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0c6      	beq.n	8005dac <_svfiprintf_r+0x130>
 8005e1e:	9105      	str	r1, [sp, #20]
 8005e20:	e7c4      	b.n	8005dac <_svfiprintf_r+0x130>
 8005e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e26:	4604      	mov	r4, r0
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e7f0      	b.n	8005e0e <_svfiprintf_r+0x192>
 8005e2c:	ab03      	add	r3, sp, #12
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	462a      	mov	r2, r5
 8005e32:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <_svfiprintf_r+0x1f4>)
 8005e34:	a904      	add	r1, sp, #16
 8005e36:	4638      	mov	r0, r7
 8005e38:	f3af 8000 	nop.w
 8005e3c:	1c42      	adds	r2, r0, #1
 8005e3e:	4606      	mov	r6, r0
 8005e40:	d1d6      	bne.n	8005df0 <_svfiprintf_r+0x174>
 8005e42:	89ab      	ldrh	r3, [r5, #12]
 8005e44:	065b      	lsls	r3, r3, #25
 8005e46:	f53f af2d 	bmi.w	8005ca4 <_svfiprintf_r+0x28>
 8005e4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e4c:	b01d      	add	sp, #116	; 0x74
 8005e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e52:	ab03      	add	r3, sp, #12
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	462a      	mov	r2, r5
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <_svfiprintf_r+0x1f4>)
 8005e5a:	a904      	add	r1, sp, #16
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	f000 f879 	bl	8005f54 <_printf_i>
 8005e62:	e7eb      	b.n	8005e3c <_svfiprintf_r+0x1c0>
 8005e64:	080062b8 	.word	0x080062b8
 8005e68:	080062c2 	.word	0x080062c2
 8005e6c:	00000000 	.word	0x00000000
 8005e70:	08005bc9 	.word	0x08005bc9
 8005e74:	080062be 	.word	0x080062be

08005e78 <_printf_common>:
 8005e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	4699      	mov	r9, r3
 8005e80:	688a      	ldr	r2, [r1, #8]
 8005e82:	690b      	ldr	r3, [r1, #16]
 8005e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bfb8      	it	lt
 8005e8c:	4613      	movlt	r3, r2
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e94:	4607      	mov	r7, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	b10a      	cbz	r2, 8005e9e <_printf_common+0x26>
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	6033      	str	r3, [r6, #0]
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	0699      	lsls	r1, r3, #26
 8005ea2:	bf42      	ittt	mi
 8005ea4:	6833      	ldrmi	r3, [r6, #0]
 8005ea6:	3302      	addmi	r3, #2
 8005ea8:	6033      	strmi	r3, [r6, #0]
 8005eaa:	6825      	ldr	r5, [r4, #0]
 8005eac:	f015 0506 	ands.w	r5, r5, #6
 8005eb0:	d106      	bne.n	8005ec0 <_printf_common+0x48>
 8005eb2:	f104 0a19 	add.w	sl, r4, #25
 8005eb6:	68e3      	ldr	r3, [r4, #12]
 8005eb8:	6832      	ldr	r2, [r6, #0]
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	42ab      	cmp	r3, r5
 8005ebe:	dc26      	bgt.n	8005f0e <_printf_common+0x96>
 8005ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ec4:	1e13      	subs	r3, r2, #0
 8005ec6:	6822      	ldr	r2, [r4, #0]
 8005ec8:	bf18      	it	ne
 8005eca:	2301      	movne	r3, #1
 8005ecc:	0692      	lsls	r2, r2, #26
 8005ece:	d42b      	bmi.n	8005f28 <_printf_common+0xb0>
 8005ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	47c0      	blx	r8
 8005eda:	3001      	adds	r0, #1
 8005edc:	d01e      	beq.n	8005f1c <_printf_common+0xa4>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	6922      	ldr	r2, [r4, #16]
 8005ee2:	f003 0306 	and.w	r3, r3, #6
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	bf02      	ittt	eq
 8005eea:	68e5      	ldreq	r5, [r4, #12]
 8005eec:	6833      	ldreq	r3, [r6, #0]
 8005eee:	1aed      	subeq	r5, r5, r3
 8005ef0:	68a3      	ldr	r3, [r4, #8]
 8005ef2:	bf0c      	ite	eq
 8005ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ef8:	2500      	movne	r5, #0
 8005efa:	4293      	cmp	r3, r2
 8005efc:	bfc4      	itt	gt
 8005efe:	1a9b      	subgt	r3, r3, r2
 8005f00:	18ed      	addgt	r5, r5, r3
 8005f02:	2600      	movs	r6, #0
 8005f04:	341a      	adds	r4, #26
 8005f06:	42b5      	cmp	r5, r6
 8005f08:	d11a      	bne.n	8005f40 <_printf_common+0xc8>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e008      	b.n	8005f20 <_printf_common+0xa8>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4652      	mov	r2, sl
 8005f12:	4649      	mov	r1, r9
 8005f14:	4638      	mov	r0, r7
 8005f16:	47c0      	blx	r8
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d103      	bne.n	8005f24 <_printf_common+0xac>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	3501      	adds	r5, #1
 8005f26:	e7c6      	b.n	8005eb6 <_printf_common+0x3e>
 8005f28:	18e1      	adds	r1, r4, r3
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	2030      	movs	r0, #48	; 0x30
 8005f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f32:	4422      	add	r2, r4
 8005f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	e7c7      	b.n	8005ed0 <_printf_common+0x58>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4622      	mov	r2, r4
 8005f44:	4649      	mov	r1, r9
 8005f46:	4638      	mov	r0, r7
 8005f48:	47c0      	blx	r8
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d0e6      	beq.n	8005f1c <_printf_common+0xa4>
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7d9      	b.n	8005f06 <_printf_common+0x8e>
	...

08005f54 <_printf_i>:
 8005f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	7e0f      	ldrb	r7, [r1, #24]
 8005f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f5c:	2f78      	cmp	r7, #120	; 0x78
 8005f5e:	4691      	mov	r9, r2
 8005f60:	4680      	mov	r8, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	469a      	mov	sl, r3
 8005f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f6a:	d807      	bhi.n	8005f7c <_printf_i+0x28>
 8005f6c:	2f62      	cmp	r7, #98	; 0x62
 8005f6e:	d80a      	bhi.n	8005f86 <_printf_i+0x32>
 8005f70:	2f00      	cmp	r7, #0
 8005f72:	f000 80d4 	beq.w	800611e <_printf_i+0x1ca>
 8005f76:	2f58      	cmp	r7, #88	; 0x58
 8005f78:	f000 80c0 	beq.w	80060fc <_printf_i+0x1a8>
 8005f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f84:	e03a      	b.n	8005ffc <_printf_i+0xa8>
 8005f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f8a:	2b15      	cmp	r3, #21
 8005f8c:	d8f6      	bhi.n	8005f7c <_printf_i+0x28>
 8005f8e:	a101      	add	r1, pc, #4	; (adr r1, 8005f94 <_printf_i+0x40>)
 8005f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08006001 	.word	0x08006001
 8005f9c:	08005f7d 	.word	0x08005f7d
 8005fa0:	08005f7d 	.word	0x08005f7d
 8005fa4:	08005f7d 	.word	0x08005f7d
 8005fa8:	08005f7d 	.word	0x08005f7d
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08005f7d 	.word	0x08005f7d
 8005fb4:	08005f7d 	.word	0x08005f7d
 8005fb8:	08005f7d 	.word	0x08005f7d
 8005fbc:	08005f7d 	.word	0x08005f7d
 8005fc0:	08006105 	.word	0x08006105
 8005fc4:	0800602d 	.word	0x0800602d
 8005fc8:	080060bf 	.word	0x080060bf
 8005fcc:	08005f7d 	.word	0x08005f7d
 8005fd0:	08005f7d 	.word	0x08005f7d
 8005fd4:	08006127 	.word	0x08006127
 8005fd8:	08005f7d 	.word	0x08005f7d
 8005fdc:	0800602d 	.word	0x0800602d
 8005fe0:	08005f7d 	.word	0x08005f7d
 8005fe4:	08005f7d 	.word	0x08005f7d
 8005fe8:	080060c7 	.word	0x080060c7
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	602a      	str	r2, [r5, #0]
 8005ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e09f      	b.n	8006140 <_printf_i+0x1ec>
 8006000:	6820      	ldr	r0, [r4, #0]
 8006002:	682b      	ldr	r3, [r5, #0]
 8006004:	0607      	lsls	r7, r0, #24
 8006006:	f103 0104 	add.w	r1, r3, #4
 800600a:	6029      	str	r1, [r5, #0]
 800600c:	d501      	bpl.n	8006012 <_printf_i+0xbe>
 800600e:	681e      	ldr	r6, [r3, #0]
 8006010:	e003      	b.n	800601a <_printf_i+0xc6>
 8006012:	0646      	lsls	r6, r0, #25
 8006014:	d5fb      	bpl.n	800600e <_printf_i+0xba>
 8006016:	f9b3 6000 	ldrsh.w	r6, [r3]
 800601a:	2e00      	cmp	r6, #0
 800601c:	da03      	bge.n	8006026 <_printf_i+0xd2>
 800601e:	232d      	movs	r3, #45	; 0x2d
 8006020:	4276      	negs	r6, r6
 8006022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006026:	485a      	ldr	r0, [pc, #360]	; (8006190 <_printf_i+0x23c>)
 8006028:	230a      	movs	r3, #10
 800602a:	e012      	b.n	8006052 <_printf_i+0xfe>
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	6820      	ldr	r0, [r4, #0]
 8006030:	1d19      	adds	r1, r3, #4
 8006032:	6029      	str	r1, [r5, #0]
 8006034:	0605      	lsls	r5, r0, #24
 8006036:	d501      	bpl.n	800603c <_printf_i+0xe8>
 8006038:	681e      	ldr	r6, [r3, #0]
 800603a:	e002      	b.n	8006042 <_printf_i+0xee>
 800603c:	0641      	lsls	r1, r0, #25
 800603e:	d5fb      	bpl.n	8006038 <_printf_i+0xe4>
 8006040:	881e      	ldrh	r6, [r3, #0]
 8006042:	4853      	ldr	r0, [pc, #332]	; (8006190 <_printf_i+0x23c>)
 8006044:	2f6f      	cmp	r7, #111	; 0x6f
 8006046:	bf0c      	ite	eq
 8006048:	2308      	moveq	r3, #8
 800604a:	230a      	movne	r3, #10
 800604c:	2100      	movs	r1, #0
 800604e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006052:	6865      	ldr	r5, [r4, #4]
 8006054:	60a5      	str	r5, [r4, #8]
 8006056:	2d00      	cmp	r5, #0
 8006058:	bfa2      	ittt	ge
 800605a:	6821      	ldrge	r1, [r4, #0]
 800605c:	f021 0104 	bicge.w	r1, r1, #4
 8006060:	6021      	strge	r1, [r4, #0]
 8006062:	b90e      	cbnz	r6, 8006068 <_printf_i+0x114>
 8006064:	2d00      	cmp	r5, #0
 8006066:	d04b      	beq.n	8006100 <_printf_i+0x1ac>
 8006068:	4615      	mov	r5, r2
 800606a:	fbb6 f1f3 	udiv	r1, r6, r3
 800606e:	fb03 6711 	mls	r7, r3, r1, r6
 8006072:	5dc7      	ldrb	r7, [r0, r7]
 8006074:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006078:	4637      	mov	r7, r6
 800607a:	42bb      	cmp	r3, r7
 800607c:	460e      	mov	r6, r1
 800607e:	d9f4      	bls.n	800606a <_printf_i+0x116>
 8006080:	2b08      	cmp	r3, #8
 8006082:	d10b      	bne.n	800609c <_printf_i+0x148>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	07de      	lsls	r6, r3, #31
 8006088:	d508      	bpl.n	800609c <_printf_i+0x148>
 800608a:	6923      	ldr	r3, [r4, #16]
 800608c:	6861      	ldr	r1, [r4, #4]
 800608e:	4299      	cmp	r1, r3
 8006090:	bfde      	ittt	le
 8006092:	2330      	movle	r3, #48	; 0x30
 8006094:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006098:	f105 35ff 	addle.w	r5, r5, #4294967295
 800609c:	1b52      	subs	r2, r2, r5
 800609e:	6122      	str	r2, [r4, #16]
 80060a0:	f8cd a000 	str.w	sl, [sp]
 80060a4:	464b      	mov	r3, r9
 80060a6:	aa03      	add	r2, sp, #12
 80060a8:	4621      	mov	r1, r4
 80060aa:	4640      	mov	r0, r8
 80060ac:	f7ff fee4 	bl	8005e78 <_printf_common>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d14a      	bne.n	800614a <_printf_i+0x1f6>
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	b004      	add	sp, #16
 80060ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	f043 0320 	orr.w	r3, r3, #32
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	4833      	ldr	r0, [pc, #204]	; (8006194 <_printf_i+0x240>)
 80060c8:	2778      	movs	r7, #120	; 0x78
 80060ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	6829      	ldr	r1, [r5, #0]
 80060d2:	061f      	lsls	r7, r3, #24
 80060d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80060d8:	d402      	bmi.n	80060e0 <_printf_i+0x18c>
 80060da:	065f      	lsls	r7, r3, #25
 80060dc:	bf48      	it	mi
 80060de:	b2b6      	uxthmi	r6, r6
 80060e0:	07df      	lsls	r7, r3, #31
 80060e2:	bf48      	it	mi
 80060e4:	f043 0320 	orrmi.w	r3, r3, #32
 80060e8:	6029      	str	r1, [r5, #0]
 80060ea:	bf48      	it	mi
 80060ec:	6023      	strmi	r3, [r4, #0]
 80060ee:	b91e      	cbnz	r6, 80060f8 <_printf_i+0x1a4>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	f023 0320 	bic.w	r3, r3, #32
 80060f6:	6023      	str	r3, [r4, #0]
 80060f8:	2310      	movs	r3, #16
 80060fa:	e7a7      	b.n	800604c <_printf_i+0xf8>
 80060fc:	4824      	ldr	r0, [pc, #144]	; (8006190 <_printf_i+0x23c>)
 80060fe:	e7e4      	b.n	80060ca <_printf_i+0x176>
 8006100:	4615      	mov	r5, r2
 8006102:	e7bd      	b.n	8006080 <_printf_i+0x12c>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	6826      	ldr	r6, [r4, #0]
 8006108:	6961      	ldr	r1, [r4, #20]
 800610a:	1d18      	adds	r0, r3, #4
 800610c:	6028      	str	r0, [r5, #0]
 800610e:	0635      	lsls	r5, r6, #24
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	d501      	bpl.n	8006118 <_printf_i+0x1c4>
 8006114:	6019      	str	r1, [r3, #0]
 8006116:	e002      	b.n	800611e <_printf_i+0x1ca>
 8006118:	0670      	lsls	r0, r6, #25
 800611a:	d5fb      	bpl.n	8006114 <_printf_i+0x1c0>
 800611c:	8019      	strh	r1, [r3, #0]
 800611e:	2300      	movs	r3, #0
 8006120:	6123      	str	r3, [r4, #16]
 8006122:	4615      	mov	r5, r2
 8006124:	e7bc      	b.n	80060a0 <_printf_i+0x14c>
 8006126:	682b      	ldr	r3, [r5, #0]
 8006128:	1d1a      	adds	r2, r3, #4
 800612a:	602a      	str	r2, [r5, #0]
 800612c:	681d      	ldr	r5, [r3, #0]
 800612e:	6862      	ldr	r2, [r4, #4]
 8006130:	2100      	movs	r1, #0
 8006132:	4628      	mov	r0, r5
 8006134:	f7fa f86c 	bl	8000210 <memchr>
 8006138:	b108      	cbz	r0, 800613e <_printf_i+0x1ea>
 800613a:	1b40      	subs	r0, r0, r5
 800613c:	6060      	str	r0, [r4, #4]
 800613e:	6863      	ldr	r3, [r4, #4]
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	2300      	movs	r3, #0
 8006144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006148:	e7aa      	b.n	80060a0 <_printf_i+0x14c>
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	462a      	mov	r2, r5
 800614e:	4649      	mov	r1, r9
 8006150:	4640      	mov	r0, r8
 8006152:	47d0      	blx	sl
 8006154:	3001      	adds	r0, #1
 8006156:	d0ad      	beq.n	80060b4 <_printf_i+0x160>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	079b      	lsls	r3, r3, #30
 800615c:	d413      	bmi.n	8006186 <_printf_i+0x232>
 800615e:	68e0      	ldr	r0, [r4, #12]
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	4298      	cmp	r0, r3
 8006164:	bfb8      	it	lt
 8006166:	4618      	movlt	r0, r3
 8006168:	e7a6      	b.n	80060b8 <_printf_i+0x164>
 800616a:	2301      	movs	r3, #1
 800616c:	4632      	mov	r2, r6
 800616e:	4649      	mov	r1, r9
 8006170:	4640      	mov	r0, r8
 8006172:	47d0      	blx	sl
 8006174:	3001      	adds	r0, #1
 8006176:	d09d      	beq.n	80060b4 <_printf_i+0x160>
 8006178:	3501      	adds	r5, #1
 800617a:	68e3      	ldr	r3, [r4, #12]
 800617c:	9903      	ldr	r1, [sp, #12]
 800617e:	1a5b      	subs	r3, r3, r1
 8006180:	42ab      	cmp	r3, r5
 8006182:	dcf2      	bgt.n	800616a <_printf_i+0x216>
 8006184:	e7eb      	b.n	800615e <_printf_i+0x20a>
 8006186:	2500      	movs	r5, #0
 8006188:	f104 0619 	add.w	r6, r4, #25
 800618c:	e7f5      	b.n	800617a <_printf_i+0x226>
 800618e:	bf00      	nop
 8006190:	080062c9 	.word	0x080062c9
 8006194:	080062da 	.word	0x080062da

08006198 <memmove>:
 8006198:	4288      	cmp	r0, r1
 800619a:	b510      	push	{r4, lr}
 800619c:	eb01 0402 	add.w	r4, r1, r2
 80061a0:	d902      	bls.n	80061a8 <memmove+0x10>
 80061a2:	4284      	cmp	r4, r0
 80061a4:	4623      	mov	r3, r4
 80061a6:	d807      	bhi.n	80061b8 <memmove+0x20>
 80061a8:	1e43      	subs	r3, r0, #1
 80061aa:	42a1      	cmp	r1, r4
 80061ac:	d008      	beq.n	80061c0 <memmove+0x28>
 80061ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061b6:	e7f8      	b.n	80061aa <memmove+0x12>
 80061b8:	4402      	add	r2, r0
 80061ba:	4601      	mov	r1, r0
 80061bc:	428a      	cmp	r2, r1
 80061be:	d100      	bne.n	80061c2 <memmove+0x2a>
 80061c0:	bd10      	pop	{r4, pc}
 80061c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ca:	e7f7      	b.n	80061bc <memmove+0x24>

080061cc <_sbrk_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d06      	ldr	r5, [pc, #24]	; (80061e8 <_sbrk_r+0x1c>)
 80061d0:	2300      	movs	r3, #0
 80061d2:	4604      	mov	r4, r0
 80061d4:	4608      	mov	r0, r1
 80061d6:	602b      	str	r3, [r5, #0]
 80061d8:	f7fb f98c 	bl	80014f4 <_sbrk>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_sbrk_r+0x1a>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_sbrk_r+0x1a>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	200009c4 	.word	0x200009c4

080061ec <memcpy>:
 80061ec:	440a      	add	r2, r1
 80061ee:	4291      	cmp	r1, r2
 80061f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80061f4:	d100      	bne.n	80061f8 <memcpy+0xc>
 80061f6:	4770      	bx	lr
 80061f8:	b510      	push	{r4, lr}
 80061fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006202:	4291      	cmp	r1, r2
 8006204:	d1f9      	bne.n	80061fa <memcpy+0xe>
 8006206:	bd10      	pop	{r4, pc}

08006208 <_realloc_r>:
 8006208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620c:	4680      	mov	r8, r0
 800620e:	4614      	mov	r4, r2
 8006210:	460e      	mov	r6, r1
 8006212:	b921      	cbnz	r1, 800621e <_realloc_r+0x16>
 8006214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006218:	4611      	mov	r1, r2
 800621a:	f7ff bc49 	b.w	8005ab0 <_malloc_r>
 800621e:	b92a      	cbnz	r2, 800622c <_realloc_r+0x24>
 8006220:	f7ff fbda 	bl	80059d8 <_free_r>
 8006224:	4625      	mov	r5, r4
 8006226:	4628      	mov	r0, r5
 8006228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800622c:	f000 f81b 	bl	8006266 <_malloc_usable_size_r>
 8006230:	4284      	cmp	r4, r0
 8006232:	4607      	mov	r7, r0
 8006234:	d802      	bhi.n	800623c <_realloc_r+0x34>
 8006236:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800623a:	d812      	bhi.n	8006262 <_realloc_r+0x5a>
 800623c:	4621      	mov	r1, r4
 800623e:	4640      	mov	r0, r8
 8006240:	f7ff fc36 	bl	8005ab0 <_malloc_r>
 8006244:	4605      	mov	r5, r0
 8006246:	2800      	cmp	r0, #0
 8006248:	d0ed      	beq.n	8006226 <_realloc_r+0x1e>
 800624a:	42bc      	cmp	r4, r7
 800624c:	4622      	mov	r2, r4
 800624e:	4631      	mov	r1, r6
 8006250:	bf28      	it	cs
 8006252:	463a      	movcs	r2, r7
 8006254:	f7ff ffca 	bl	80061ec <memcpy>
 8006258:	4631      	mov	r1, r6
 800625a:	4640      	mov	r0, r8
 800625c:	f7ff fbbc 	bl	80059d8 <_free_r>
 8006260:	e7e1      	b.n	8006226 <_realloc_r+0x1e>
 8006262:	4635      	mov	r5, r6
 8006264:	e7df      	b.n	8006226 <_realloc_r+0x1e>

08006266 <_malloc_usable_size_r>:
 8006266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800626a:	1f18      	subs	r0, r3, #4
 800626c:	2b00      	cmp	r3, #0
 800626e:	bfbc      	itt	lt
 8006270:	580b      	ldrlt	r3, [r1, r0]
 8006272:	18c0      	addlt	r0, r0, r3
 8006274:	4770      	bx	lr
	...

08006278 <_init>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	bf00      	nop
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr

08006284 <_fini>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	bf00      	nop
 8006288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628a:	bc08      	pop	{r3}
 800628c:	469e      	mov	lr, r3
 800628e:	4770      	bx	lr
